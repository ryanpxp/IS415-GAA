{
  "hash": "a3f09ba3a46f8fcfed837f824b6d96e4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 02: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level\"\nauthor: \"Ryan Peh\"\ndate: \"September 25, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n# Background\n\nDrug abuse is associated with significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. In 2021, 1 in 17 people aged 15–64 in the world had used a drug in the past 12 months. Notwithstanding population growth, the estimated number of drug users grew from 240 million in 2011 to 296 million in 2021.\n\nThe geopolitics of Thailand which is near the [Golden Triangle](https://en.wikipedia.org/wiki/Golden_Triangle_(Southeast_Asia)) of Indochina, the largest drug production site in Asia, and the constant transportation infrastructure development made Thailand became market and transit routes for drug trafficking to the third countries.\n\nIn Thailand, drug abuse is one of the major social issue. There are about 2.7 million youths using drugs in Thailand. Among youths aged between 15 and 19 years, there are about 300,000 who have needs for drug treatment. Most of Thai youths involved with drugs are vocational-school students, which nearly doubles in number compared to secondary-school students.\n\n# Objectives\n\nAs a curious geospatial analytics green horn, you are interested to discover:\n\n-   if the key indicators of drug abuse of Thailand are independent from space.\n\n-   If the indicators of drug abuse is indeed spatial dependent, then, to detect where are the clusters and outliers, and the hotspots.\n\n-   Last but not least, to investigate how the observation above evolve over time.\n\n# The Task\n\nThe specific tasks of this take-home exercise are as follows:\n\n-   Using appropriate function of **sf** and **tidyverse**, preparing the following geospatial data layer:\n\n    -   a study area layer in sf polygon features. It must be at [province level](https://en.wikipedia.org/wiki/Provinces_of_Thailand) (including Bangkok) of Thailand.\n\n    -   a drug abuse indicators layer within the study area in sf polygon features.\n\n-   Using the extracted data, perform global spatial autocorrelation analysis by using [sfdep methods](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-glsa).\n\n-   Using the extracted data, perform local spatial autocorrelation analysis by using [sfdep methods](https://r4gdsa.netlify.app/chap10.html).\n\n-   Describe the spatial patterns revealed by the analysis above.\n\n# The Data\n\nFor the purpose of this take-home exercise, two data sets shall be used, they are:\n\n-   [Thailand Drug Offenses \\[2017-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-drug-offenses-2017-2022) at Kaggle.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) at HDX. You are required to use the province boundary data set.\n\n# Importing Package\n\n## Dependencies\n\nLoading the required packages\n\n1.  **sf :** Needed to handle spatial data through the new simple features standard\n\n2.  **tmap :** Create thematic maps, particularly chloropleth maps in our case\n\n3.  **tidyverse :** For easy data manipulation and some visualisation\n\n4.  **sfdep :** Spatial dependence with spatial features, the highlight of this take home exercise. The spacetime object is particularly useful\n\n5.  **ggplot2** : For creating advanced visualisations, graphics and maps using the Grammar of Graphics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tmap, tidyverse, ggplot2)\n```\n:::\n\n\n## Geospatial data\n\n`st_read()` of **sf** package will be used to import Thailand shapefile into R environment in order to get the polygons representing the borders of the provinces in Thailand.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai <- st_read(dsn = \"data/raw/Thailand_shp\", \n                 layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\ryanpxp\\IS415-GAA\\Take-home_Ex\\Take-home_Ex02\\data\\raw\\Thailand_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nNext, we will generate a plot of the `thai` object to visualise its structure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(thai) + \n  tm_fill(\"ADM1_EN\",\n          title = \"Study Area: Thailand Provinces\",\n          palette = \"inferno\") +\n  tm_borders() +\n  tm_layout(legend.show = FALSE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Aspatial data\n\n`read_csv()` of **sf** package will be used to import the drug offences in the from of csv file into R environment. The output is R dataframe class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugs <- read_csv(\"data/raw/thai_drug_offenses_2017_2022.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n# Wrangling\n\n## Mismatched Province\n\nBy checking on the naming of the province from both the geospatial and aspatial data, we can see that some of the namings are mismatched. This would cause problems when handling the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomparison_df <- data.frame(\n  Geospatial = sort(unique(thai$ADM1_EN)),\n  Aspatial = sort(unique(drugs$province_en))\n)\n\nprint(comparison_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 Geospatial                 Aspatial\n1             Amnat Charoen            Amnat Charoen\n2                 Ang Thong                Ang Thong\n3                   Bangkok                  Bangkok\n4                 Bueng Kan                  buogkan\n5                  Buri Ram                 Buri Ram\n6              Chachoengsao             Chachoengsao\n7                  Chai Nat                 Chai Nat\n8                Chaiyaphum               Chaiyaphum\n9               Chanthaburi              Chanthaburi\n10               Chiang Mai               Chiang Mai\n11               Chiang Rai               Chiang Rai\n12                Chon Buri                Chon Buri\n13                 Chumphon                 Chumphon\n14                  Kalasin                  Kalasin\n15           Kamphaeng Phet           Kamphaeng Phet\n16             Kanchanaburi             Kanchanaburi\n17                Khon Kaen                Khon Kaen\n18                    Krabi                    Krabi\n19                  Lampang                  Lampang\n20                  Lamphun                  Lamphun\n21                     Loei                   Loburi\n22                 Lop Buri                     Loei\n23             Mae Hong Son             Mae Hong Son\n24            Maha Sarakham            Maha Sarakham\n25                 Mukdahan                 Mukdahan\n26             Nakhon Nayok             Nakhon Nayok\n27            Nakhon Pathom            Nakhon Pathom\n28            Nakhon Phanom            Nakhon Phanom\n29        Nakhon Ratchasima        Nakhon Ratchasima\n30             Nakhon Sawan             Nakhon Sawan\n31      Nakhon Si Thammarat      Nakhon Si Thammarat\n32                      Nan                      Nan\n33               Narathiwat               Narathiwat\n34         Nong Bua Lam Phu         Nong Bua Lam Phu\n35                Nong Khai                Nong Khai\n36               Nonthaburi               Nonthaburi\n37             Pathum Thani             Pathum Thani\n38                  Pattani                  Pattani\n39                 Phangnga                 Phangnga\n40              Phatthalung              Phatthalung\n41                   Phayao                   Phayao\n42               Phetchabun               Phetchabun\n43              Phetchaburi              Phetchaburi\n44                  Phichit                  Phichit\n45              Phitsanulok              Phitsanulok\n46 Phra Nakhon Si Ayutthaya Phra Nakhon Si Ayutthaya\n47                    Phrae                    Phrae\n48                   Phuket                   Phuket\n49             Prachin Buri             Prachin Buri\n50      Prachuap Khiri Khan      Prachuap Khiri Khan\n51                   Ranong                   Ranong\n52               Ratchaburi               Ratchaburi\n53                   Rayong                   Rayong\n54                   Roi Et                   Roi Et\n55                  Sa Kaeo                  Sa Kaeo\n56             Sakon Nakhon             Sakon Nakhon\n57             Samut Prakan             Samut Prakan\n58             Samut Sakhon             Samut Sakhon\n59          Samut Songkhram          Samut Songkhram\n60                 Saraburi                 Saraburi\n61                    Satun                    Satun\n62                Si Sa Ket                Si Sa Ket\n63                Sing Buri                Sing Buri\n64                 Songkhla                 Songkhla\n65                Sukhothai                Sukhothai\n66              Suphan Buri              Suphan Buri\n67              Surat Thani              Surat Thani\n68                    Surin                    Surin\n69                      Tak                      Tak\n70                    Trang                    Trang\n71                     Trat                     Trat\n72         Ubon Ratchathani         Ubon Ratchathani\n73               Udon Thani               Udon Thani\n74              Uthai Thani              Uthai Thani\n75                Uttaradit                Uttaradit\n76                     Yala                     Yala\n77                 Yasothon                 Yasothon\n```\n\n\n:::\n:::\n\n\nThe identified mismatches are:\n\n| Geospatial         | Aspatial         |\n|--------------------|------------------|\n| Bueng Kan (Line 4) | buogkan (Line 4) |\n| Lop Buri (Line 22) | Loburi (Line 21) |\n\nWe will have to change these province names in the aspatial data to match those in the geospatial daata.\n\n::: panel-tabset\n### The code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugs <- drugs %>%\n  mutate(province_en = recode(province_en,\n                              \"buogkan\" = \"Bueng Kan\",\n                              \"Loburi\" = \"Lop Buri\"))\n```\n:::\n\n\n### Checking the output\n\nWe can see that both **buogkan** and **Loburi** is now changed into **Bueng** **Kan** and **Lop** **Buri**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(sort(unique(drugs$province_en)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Amnat Charoen\"            \"Ang Thong\"               \n [3] \"Bangkok\"                  \"Bueng Kan\"               \n [5] \"Buri Ram\"                 \"Chachoengsao\"            \n [7] \"Chai Nat\"                 \"Chaiyaphum\"              \n [9] \"Chanthaburi\"              \"Chiang Mai\"              \n[11] \"Chiang Rai\"               \"Chon Buri\"               \n[13] \"Chumphon\"                 \"Kalasin\"                 \n[15] \"Kamphaeng Phet\"           \"Kanchanaburi\"            \n[17] \"Khon Kaen\"                \"Krabi\"                   \n[19] \"Lampang\"                  \"Lamphun\"                 \n[21] \"Loei\"                     \"Lop Buri\"                \n[23] \"Mae Hong Son\"             \"Maha Sarakham\"           \n[25] \"Mukdahan\"                 \"Nakhon Nayok\"            \n[27] \"Nakhon Pathom\"            \"Nakhon Phanom\"           \n[29] \"Nakhon Ratchasima\"        \"Nakhon Sawan\"            \n[31] \"Nakhon Si Thammarat\"      \"Nan\"                     \n[33] \"Narathiwat\"               \"Nong Bua Lam Phu\"        \n[35] \"Nong Khai\"                \"Nonthaburi\"              \n[37] \"Pathum Thani\"             \"Pattani\"                 \n[39] \"Phangnga\"                 \"Phatthalung\"             \n[41] \"Phayao\"                   \"Phetchabun\"              \n[43] \"Phetchaburi\"              \"Phichit\"                 \n[45] \"Phitsanulok\"              \"Phra Nakhon Si Ayutthaya\"\n[47] \"Phrae\"                    \"Phuket\"                  \n[49] \"Prachin Buri\"             \"Prachuap Khiri Khan\"     \n[51] \"Ranong\"                   \"Ratchaburi\"              \n[53] \"Rayong\"                   \"Roi Et\"                  \n[55] \"Sa Kaeo\"                  \"Sakon Nakhon\"            \n[57] \"Samut Prakan\"             \"Samut Sakhon\"            \n[59] \"Samut Songkhram\"          \"Saraburi\"                \n[61] \"Satun\"                    \"Si Sa Ket\"               \n[63] \"Sing Buri\"                \"Songkhla\"                \n[65] \"Sukhothai\"                \"Suphan Buri\"             \n[67] \"Surat Thani\"              \"Surin\"                   \n[69] \"Tak\"                      \"Trang\"                   \n[71] \"Trat\"                     \"Ubon Ratchathani\"        \n[73] \"Udon Thani\"               \"Uthai Thani\"             \n[75] \"Uttaradit\"                \"Yala\"                    \n[77] \"Yasothon\"                \n```\n\n\n:::\n:::\n\n:::\n\n## Exclusion of suspected drug offences\n\nTaking a peek at the type of drug offenses:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(drugs$types_of_drug_offenses)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"drug_use_cases\"                                        \n [2] \"suspects_in_drug_use_cases\"                            \n [3] \"possession_cases\"                                      \n [4] \"suspects_in_possession_cases\"                          \n [5] \"possession_with_intent_to_distribute_cases\"            \n [6] \"suspects_in_possession_with_intent_to_distribute_cases\"\n [7] \"trafficking_cases\"                                     \n [8] \"suspects_in_trafficking_cases\"                         \n [9] \"production_cases\"                                      \n[10] \"suspects_in_production_cases\"                          \n[11] \"import_cases\"                                          \n[12] \"suspects_in_import_cases\"                              \n[13] \"export_cases\"                                          \n[14] \"suspects_in_export_cases\"                              \n[15] \"conspiracy_cases\"                                      \n[16] \"suspects_in_conspiracy_cases\"                          \n```\n\n\n:::\n:::\n\n\nFrom the above output, the types of offences in the aspatial data includes suspected crimes.\n\nAlthough, including suspected crimes have its advantages such as insights to emerging crime hotspots, the following are the reasons I have decided to exclude suspected cases:\n\n**Accuracy and Precision**: Suspected cases may not be confirmed as actual crimes, so including them could overestimate crime rates and lead to misleading conclusions. This can distort the spatial patterns and cause unnecessary alarm in areas where crimes were not ultimately verified.\n\n**Data Quality and Reliability**: Suspected cases might introduce bias due to inconsistencies in how they are reported or defined across regions. For robust analysis, it's often better to focus on confirmed cases to ensure the data's reliability and comparability.\n\nTherefore, we will be extracting only the confirmed cases from the types of drug offenses in the aspatial data for analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfirmed_drug_offenses <- c(\n  \"drug_use_cases\", \"possession_cases\", \"possession_with_intent_to_distribute_cases\", \"trafficking_cases\", \"production_cases\", \"import_cases\", \"export_cases\", \"conspiracy_cases\"\n)\n```\n:::\n\n\nWe will also break up the data into years to look out for trends.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugs_by_year <- list()\n\nfor (year in 2017:2022) {\n  drugs_by_year[[as.character(year)]] <- left_join(thai, drugs, by = c(\"ADM1_EN\" = \"province_en\")) %>%\n    dplyr::select(1:3, 17:19,21) %>%\n    filter(fiscal_year == year, types_of_drug_offenses %in% confirmed_drug_offenses)\n}\n```\n:::\n\n\nTo speed up the process of loading the dataset in the future, we save the processed data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(drugs_by_year, \"data/rds/drugs_by_year.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugs_by_year <- read_rds(\"data/rds/drugs_by_year.rds\")\n```\n:::\n\n\nChecking the types of drug offences:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(drugs_by_year[[\"2018\"]]$types_of_drug_offenses)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"drug_use_cases\"                            \n[2] \"possession_cases\"                          \n[3] \"possession_with_intent_to_distribute_cases\"\n[4] \"trafficking_cases\"                         \n[5] \"production_cases\"                          \n[6] \"import_cases\"                              \n[7] \"export_cases\"                              \n[8] \"conspiracy_cases\"                          \n```\n\n\n:::\n:::\n\n\nWe can see that the suspected cases are now removed from the aspatial data.\n\n## Neighbour data\n\n### Study area\n\nThis is a geographical map of Thailand's Provinces retrieved from Wikipedia.\n\n![Breakdown of Provinces of Thailand](img\\Thailand_provinces_en.svg.png){width=\"100%\" style=\"object-fit: contain;\"}\n\nLooking at the above geographical map, we can see that vertical, horizontal and diagonal neighbours of the province are close enough to travel to and influence each other. Hence, we would be using **Queen's contiguity** neighbour criteria.\n\n### Disconnection of neighbours\n\nTo get a quick view on the neighbours of the provinces, we can plot out the neighbours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate contiguity neighbors\nnb <- st_contiguity(thai$geometry)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in spdep::poly2nb(geometry, queen = queen, ...): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in spdep::poly2nb(geometry, queen = queen, ...): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n:::\n\n\nRunning the code produces warnings on some observations having no neighbours. It also indicated that the graph has split into 2 sub-graphs.\n\nTo do further investigations, plotting the neighbours would provide a quick overview of what is happening.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(thai), border = 'gray')\nplot(nb, st_geometry(thai), col = 'red', add = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nOn closer inspecting, one of the province in the bottom left is disconnected from the rest. By referencing the geographical map of Thailand, it appears to be **Phuket** that is disconnected from the rest.\n\n![Close-up of neighbour plot](img\\Neighbour_phuket_plot.png){width=\"100%\" style=\"object-fit: contain;\"} To verify that **Phuket** is indeed the disconnected region, we can check the summary.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n14 with 1 link\n2 most connected regions:\n29 51 with 9 links\n```\n\n\n:::\n:::\n\n\nFrom the above we can see that region number 67 is without any neighbours. To retrieve the name of region 67 (index 67 in `nb`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai$ADM1_EN[67]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Phuket\"\n```\n\n\n:::\n:::\n\n\nIt is confirmed that **Phuket** is disconnected from the rest.\n\n![Phuket Region](img\\Phuket_region.png){width=\"100%\" style=\"object-fit: contain;\"} Looking at the map, we can see that while **Phuket** is disconnected by water body, we can considered it to be the neighbour of **Phangnga**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(unique(thai$ADM1_EN) == \"Phangnga\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 66\n```\n\n\n:::\n:::\n\n\nFrom the code above, we now know the number for the **Phangnga** region (number 67) and we will manually add **Phuket** to **Phangnga** and **Phangnga** to **Phuket**.\n\nAdding **Phuket** to **Phangnga**\n\n::: callout-warning\n## This code is not idempotent!\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb[[66]] <- c(nb[[66]], as.integer(67))\n```\n:::\n\n\nAdding **Phangnga** to **Phuket**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb[[67]] <- as.integer(c(66))\n```\n:::\n\n\nEnsure that all regions are connected:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 354 \nPercentage nonzero weights: 5.970653 \nAverage number of links: 4.597403 \n2 disjoint connected subgraphs\nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 \n 2  5 16 16 17 10  5  4  2 \n2 least connected regions:\n14 67 with 1 link\n2 most connected regions:\n29 51 with 9 links\n```\n\n\n:::\n:::\n\n\n**Phuket** and **Phangnga** should now be connected when plotting the neighbour\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(thai), border = 'gray')\nplot(nb, st_geometry(thai), col = 'red', add = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n## Setting of seed\n\nLastly, in order to make the data reproducible we would set the seed to a specify value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12345)\n```\n:::\n\n\n# Global Moran's I Test\n\nIn order to evaluate spatial autocorrelation in our dataset, or to determine whether drug cases tend to cluster within specific provinces, we run Global Moran's Test.\n\nWe have to first add the neighbours and the weights of the neighbours as columns to the dataset.\n\n::: panel-tabset\n### 2017\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q2017 <- drugs_by_year[[\"2017\"]] %>%\n  group_by(ADM1_EN) %>%  \n  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  \n  ungroup() %>%\n  mutate(nb = nb,  \n         wt = st_weights(nb, style = \"W\"),  \n         .before = 1)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### 2018\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q2018 <- drugs_by_year[[\"2018\"]] %>%\n  group_by(ADM1_EN) %>%  \n  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  \n  ungroup() %>%\n  mutate(nb = nb,  \n         wt = st_weights(nb, style = \"W\"), \n         .before = 1)\n\nglimpse(wm_q2018)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### 2019\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q2019 <- drugs_by_year[[\"2019\"]] %>%\n  group_by(ADM1_EN) %>%  \n  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  \n  ungroup() %>%\n  mutate(nb = nb,  \n         wt = st_weights(nb, style = \"W\"),  \n         .before = 1)\n\nglimpse(wm_q2019)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### 2020\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q2020 <- drugs_by_year[[\"2020\"]] %>%\n  group_by(ADM1_EN) %>% \n  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  # Summarize cases per province\n  ungroup() %>%\n  mutate(nb = nb,  \n         wt = st_weights(nb, style = \"W\"), \n         .before = 1)\n\nglimpse(wm_q2020)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q2021 <- drugs_by_year[[\"2021\"]] %>%\n  group_by(ADM1_EN) %>% \n  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  # Summarize cases per province\n  ungroup() %>%\n  mutate(nb = nb,  \n         wt = st_weights(nb, style = \"W\"), \n         .before = 1)\n\nglimpse(wm_q2021)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### 2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q2022 <- drugs_by_year[[\"2022\"]] %>%\n  group_by(ADM1_EN) %>% \n  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  # Summarize cases per province\n  ungroup() %>%\n  mutate(nb = nb,  \n         wt = st_weights(nb, style = \"W\"), \n         .before = 1)\n\nglimpse(wm_q2022)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n:::\n\n## Quick glance at global Moran's I test\n\nThe assumptions of the test are sensitive to the structure of the neighbor relationship graph and other factors. To validate the results, we will run Global Moran's I tests.\n\nTo get a sensing of possible spatial correlation between provinces, we can run the code chunks below first.\n\n::: panel-tabset\n### 2017\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI2017 <- global_moran(wm_q2017$no_cases,\n                       wm_q2017$nb,\n                       wm_q2017$wt)\nglimpse(moranI2017)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ I: num -0.0697\n $ K: num 31.8\n```\n\n\n:::\n:::\n\n\n### 2018\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI2018 <- global_moran(wm_q2018$no_cases,\n                       wm_q2018$nb,\n                       wm_q2018$wt)\nglimpse(moranI2018)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ I: num -0.0844\n $ K: num 30.2\n```\n\n\n:::\n:::\n\n\n### 2019\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI2019 <- global_moran(wm_q2019$no_cases,\n                       wm_q2019$nb,\n                       wm_q2019$wt)\nglimpse(moranI2019)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ I: num -0.0905\n $ K: num 18.4\n```\n\n\n:::\n:::\n\n\n### 2020\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI2020 <- global_moran(wm_q2020$no_cases,\n                       wm_q2020$nb,\n                       wm_q2020$wt)\nglimpse(moranI2020)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ I: num -0.0473\n $ K: num 12.2\n```\n\n\n:::\n:::\n\n\n### 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI2021 <- global_moran(wm_q2021$no_cases,\n                       wm_q2021$nb,\n                       wm_q2021$wt)\nglimpse(moranI2021)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ I: num -0.0199\n $ K: num 5.54\n```\n\n\n:::\n:::\n\n\n### 2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI2022 <- global_moran(wm_q2022$no_cases,\n                       wm_q2022$nb,\n                       wm_q2022$wt)\nglimpse(moranI2022)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ I: num 0.0408\n $ K: num 3.29\n```\n\n\n:::\n:::\n\n:::\n\nFrom the quick glance, the results are leaning towards random patterns. We should run permutations of the Global Moran's I to investigate further.\n\n## Permutations of Global Moran's I\n\nWe will use [`global_moran_perm()`](https://rdrr.io/github/JosiahParry/sfdep/man/global_moran_perm.html) function from **sfdep** package with `nsim = 99`.\n\n::: panel-tabset\n### 2017\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q2017$no_cases,\n                       wm_q2017$nb,\n                       wm_q2017$wt,\n                  nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = -0.069721, observed rank = 13, p-value = 0.26\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\n### 2018\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q2018$no_cases,\n                       wm_q2018$nb,\n                       wm_q2018$wt,\n                  nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = -0.084421, observed rank = 10, p-value = 0.2\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\n### 2019\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q2019$no_cases,\n                       wm_q2019$nb,\n                       wm_q2019$wt,\n                  nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = -0.090517, observed rank = 9, p-value = 0.18\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\n### 2020\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q2020$no_cases,\n                       wm_q2020$nb,\n                       wm_q2020$wt,\n                  nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = -0.047281, observed rank = 31, p-value = 0.62\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\n### 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q2021$no_cases,\n                       wm_q2021$nb,\n                       wm_q2021$wt,\n                  nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = -0.019865, observed rank = 54, p-value = 0.92\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\n### 2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q2022$no_cases,\n                       wm_q2022$nb,\n                       wm_q2022$wt,\n                  nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.040794, observed rank = 76, p-value = 0.48\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n:::\n\n## Inference\n\nFrom the results of the Monte Carlo simulations of Moran's I for the years 2017-2022, we can infer that:\n\n1.  **Moran’s I statistic values** for each year are close to zero (ranging from -0.09 to 0.04), indicating little to no spatial autocorrelation in the distribution of dengue cases. Therefore, the spatial distribution of cases does not show significant clustering or dispersion patterns across the areas analyzed.\n\n2.  **P-values** for all years are much greater than 0.05, ranging from 0.3 to 0.96, which means that we fail to reject the null hypothesis of no spatial autocorrelation. This suggests that we cannot conclude that there are signs of significant spatial clustering.\n\nOverall, the results suggest that the distribution of dengue cases in these years does not show a significant spatial pattern and can be considered random based on Moran's I and Monte Carlo simulations.\n\n# Local Moran's I test\n\nDespite the results from the global Moran's I test not showing significant spatial autocorrelation, it may still be worth performing **local Moran's I**/Local Indicators of Spatial Associationc(LISA) for a more detailed, localized analysis.\n\nEven when global Moran's I suggests no overall spatial autocorrelation, local Moran's I can reveal clusters or outliers at a finer scale. Some areas might still exhibit significant clustering or spatial dependence, which the global test may not detect. For example, there could be pockets of high or low incidence that are spatially clustered even if the overall pattern is random.\n\nThe code chunk below will generate the **local Moran's I** for each individual years.\n\n::: panel-tabset\n### 2017\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa2017 <- wm_q2017 %>% \n  mutate(local_moran = local_moran(\n    no_cases, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n\n### 2018\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa2018 <- wm_q2018 %>% \n  mutate(local_moran = local_moran(\n    no_cases, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n\n### 2019\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa2019 <- wm_q2019 %>% \n  mutate(local_moran = local_moran(\n    no_cases, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n\n### 2020\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa2020 <- wm_q2020 %>% \n  mutate(local_moran = local_moran(\n    no_cases, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n\n### 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa2021 <- wm_q2021 %>% \n  mutate(local_moran = local_moran(\n    no_cases, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n\n### 2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa2022 <- wm_q2022 %>% \n  mutate(local_moran = local_moran(\n    no_cases, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n:::\n\n## Skewness of the LISA\n\nIn order to identify if we should use mean or median values for the visualisation, we need to identify how skewed the data are.\n\n::: panel-tabset\n### 2017\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_greater_than_05 <- sum(abs(lisa2017$skewness) > 0.5)\npercentage <- (num_greater_than_05 / nrow(lisa2017)) * 100\n\nprint(paste0(\"Percentage of rows with abs(skewness) > 0.5: \", round(percentage, 2), \"%\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Percentage of rows with abs(skewness) > 0.5: 100%\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(lisa2017, aes(x = skewness)) +\n  geom_histogram(bins = 20, fill = \"coral\", color = \"black\") +\n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\", linewidth = 1) +\n  labs(title = \"Distribution of Skewness\",\n       x = \"Skewness\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5, size = 14))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n:::\n\n\n### 2018\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_greater_than_05 <- sum(abs(lisa2018$skewness) > 0.5)\npercentage <- (num_greater_than_05 / nrow(lisa2018)) * 100\n\nprint(paste0(\"Percentage of rows with abs(skewness) > 0.5: \", round(percentage, 2), \"%\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Percentage of rows with abs(skewness) > 0.5: 98.7%\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(lisa2018, aes(x = skewness)) +\n  geom_histogram(bins = 20, fill = \"coral\", color = \"black\") +\n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\", linewidth = 1) +\n  labs(title = \"Distribution of Skewness\",\n       x = \"Skewness\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5, size = 14))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-63-1.png){width=672}\n:::\n:::\n\n\n### 2019\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_greater_than_05 <- sum(abs(lisa2019$skewness) > 0.5)\npercentage <- (num_greater_than_05 / nrow(lisa2019)) * 100\n\nprint(paste0(\"Percentage of rows with abs(skewness) > 0.5: \", round(percentage, 2), \"%\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Percentage of rows with abs(skewness) > 0.5: 100%\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(lisa2019, aes(x = skewness)) +\n  geom_histogram(bins = 20, fill = \"coral\", color = \"black\") +\n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\", linewidth = 1) +\n  labs(title = \"Distribution of Skewness\",\n       x = \"Skewness\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5, size = 14))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n:::\n\n\n### 2020\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_greater_than_05 <- sum(abs(lisa2020$skewness) > 0.5)\npercentage <- (num_greater_than_05 / nrow(lisa2020)) * 100\n\nprint(paste0(\"Percentage of rows with abs(skewness) > 0.5: \", round(percentage, 2), \"%\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Percentage of rows with abs(skewness) > 0.5: 98.7%\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(lisa2020, aes(x = skewness)) +\n  geom_histogram(bins = 20, fill = \"coral\", color = \"black\") +\n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\", linewidth = 1) +\n  labs(title = \"Distribution of Skewness\",\n       x = \"Skewness\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5, size = 14)) \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-67-1.png){width=672}\n:::\n:::\n\n\n### 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_greater_than_05 <- sum(abs(lisa2021$skewness) > 0.5)\npercentage <- (num_greater_than_05 / nrow(lisa2021)) * 100\n\nprint(paste0(\"Percentage of rows with abs(skewness) > 0.5: \", round(percentage, 2), \"%\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Percentage of rows with abs(skewness) > 0.5: 76.62%\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(lisa2021, aes(x = skewness)) +\n  geom_histogram(bins = 20, fill = \"coral\", color = \"black\") +\n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\", linewidth = 1) +\n  labs(title = \"Distribution of Skewness\",\n       x = \"Skewness\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5, size = 14))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n:::\n\n\n### 2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_greater_than_05 <- sum(abs(lisa2022$skewness) > 0.5)\npercentage <- (num_greater_than_05 / nrow(lisa2022)) * 100\n\nprint(paste0(\"Percentage of rows with abs(skewness) > 0.5: \", round(percentage, 2), \"%\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Percentage of rows with abs(skewness) > 0.5: 42.86%\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(lisa2022, aes(x = skewness)) +\n  geom_histogram(bins = 20, fill = \"coral\", color = \"black\") +\n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\", linewidth = 1) +\n  labs(title = \"Distribution of Skewness\",\n       x = \"Skewness\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5, size = 14))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n\n:::\n\nSince the data is evidently skewed for all the years, we would use the median instead of the mean to visualise the data.\n\n## Visualising Local Spatial Autocorrelation Map and Significance Map\n\nWe will be using the `tmap` package to visualize spatial patterns by generating two side-by-side thematic maps for each years' local Moran's I.\n\n::: panel-tabset\n### 2017\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap1 <- tm_shape(lisa2017) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Local Moran's I of No of cases\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(lisa2017) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n          labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\"),\n          palette = \"-Purples\") +   \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"P-value of Local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-72-1.png){width=672}\n:::\n:::\n\n\n### 2018\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap1 <- tm_shape(lisa2018) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6, 8)) +\n  tm_layout(main.title = \"Local Moran's I of No of Cases\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(lisa2018) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n          labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\"),\n          palette = \"-Purples\") +   \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"P-value of Local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-73-1.png){width=672}\n:::\n:::\n\n\n### 2019\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap1 <- tm_shape(lisa2019) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Local Moran's I of No of cases\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(lisa2019) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n          labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\"),\n          palette = \"-Purples\") +   \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"P-value of Local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n\n### 2020\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap1 <- tm_shape(lisa2020) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Local Moran's I of No of cases\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(lisa2020) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n          labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\"),\n          palette = \"-Purples\") +   \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"P-value of Local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-75-1.png){width=672}\n:::\n:::\n\n\n### 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap1 <- tm_shape(lisa2021) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Local Moran's I of No of cases\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(lisa2021) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n          labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\"),\n          palette = \"-Purples\") +   \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"P-value of Local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-76-1.png){width=672}\n:::\n:::\n\n\n### 2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap1 <- tm_shape(lisa2022) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Local Moran's I of No of cases\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(lisa2022) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n          labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\"),\n          palette = \"-Purples\") +   \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"P-value of Local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-77-1.png){width=672}\n:::\n:::\n\n:::\n\n## Visualising Statistically Significant Local Spatial Autocorrelation Map\n\nIn order to better provide a comprehensive view of spatial autocorrelation, we will specifically be focusing on statistically significant areas only.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlisa2017_sig <- lisa2017 %>% filter(p_ii < 0.05)\nlisa2018_sig <- lisa2018 %>% filter(p_ii < 0.05)\nlisa2019_sig <- lisa2019 %>% filter(p_ii < 0.05)\nlisa2020_sig <- lisa2020 %>% filter(p_ii < 0.05)\nlisa2021_sig <- lisa2021 %>% filter(p_ii < 0.05)\nlisa2022_sig <- lisa2022 %>% filter(p_ii < 0.05)\n\n# Create individual maps\nmap_2017 <- tm_shape(lisa2017) +\n  tm_polygons() + \n  tm_borders(alpha = 0.5) + \n  tm_shape(lisa2017_sig) + \n  tm_fill(\"median\", title = \"Clusters\") +\n  tm_borders(alpha = 0.4) +\n  tm_layout(main.title = \"LISA Significant(2017)\", main.title.size = 1)\n\nmap_2018 <- tm_shape(lisa2018) +\n  tm_polygons() + \n  tm_borders(alpha = 0.5) + \n  tm_shape(lisa2018_sig) + \n  tm_fill(\"median\", title = \"Clusters\") +\n  tm_borders(alpha = 0.4) +\n  tm_layout(main.title = \"LISA Significant(2018)\", main.title.size = 1)\n\nmap_2019 <- tm_shape(lisa2019) +\n  tm_polygons() + \n  tm_borders(alpha = 0.5) + \n  tm_shape(lisa2019_sig) + \n  tm_fill(\"median\", title = \"Clusters\") +\n  tm_borders(alpha = 0.4) +\n  tm_layout(main.title = \"LISA Significant(2019)\", main.title.size = 1)\n\nmap_2020 <- tm_shape(lisa2020) +\n  tm_polygons() + \n  tm_borders(alpha = 0.5) + \n  tm_shape(lisa2020_sig) + \n  tm_fill(\"median\", title = \"Clusters\") +\n  tm_borders(alpha = 0.4) +\n  tm_layout(main.title = \"LISA Significant(2020)\", main.title.size = 1)\n\nmap_2021 <- tm_shape(lisa2021) +\n  tm_polygons() + \n  tm_borders(alpha = 0.5) + \n  tm_shape(lisa2021_sig) + \n  tm_fill(\"median\", title = \"Clusters\") +\n  tm_borders(alpha = 0.4) +\n  tm_layout(main.title = \"LISA Significant(2021)\", main.title.size = 1)\n\nmap_2022 <- tm_shape(lisa2022) +\n  tm_polygons() + \n  tm_borders(alpha = 0.5) + \n  tm_shape(lisa2022_sig) + \n  tm_fill(\"median\", title = \"Clusters\") +\n  tm_borders(alpha = 0.4) +\n  tm_layout(main.title = \"LISA Significant(2022)\", main.title.size = 1)\n\ntmap_mode(\"plot\")\ntmap_arrange(map_2017, map_2018, map_2019, map_2020, map_2021, map_2022, ncol = 3)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-78-1.png){width=672}\n:::\n:::\n\n\n## Inference\n\nBased on the Local Moran's I maps of Thailand from 2017 to 2022 above, the key conclusions that can be drawn are:\n\n1.  A **persistent High-High cluster appears in the northeastern region in most years** (2017, 2018, 2021, 2022), suggesting a consistent hotspot.This might suggests an entrenched drug problem in this region. Other areas show more variability, shifting between different cluster types across years.\n\n2.  There's limited evidence of Low-Low clusters throughout the period which might suggest that **low drug related crimes in one province do not influence drug related crimes in its neighbouring province**.\n\n# Conclusion\n\nThe results suggest that while certain areas (like the northeastern region) show persistent outliers of drug abuse, the overall spatial pattern is random and varies over time. Policing effort should be enforced regardless of the province and broader preventive measures may be necessary to address fluctuating crime patterns.\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}