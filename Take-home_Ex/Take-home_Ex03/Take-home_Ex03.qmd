---
title: "Take-home Ex03"
author: "Ryan Peh"
date: "October 31, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
---

## **Overview and Objectives**

In this take-home my aim is to prototype and evaluate the visualisation of pages and components in our Shiny application.

My responsibilities will be involving the Geographically Weighted Regression (GWR) on the districts of Malaysia. The GWR would focus on modelling crime rates of each district with household income, income inequality and poverty.

## Data

-   **Income Inequality Data:** Household income inequality by district (<https://data.gov.my/data-catalogue/hh_inequality_district>)

-   **Income Data:** Mean and median gross monthly by district (<https://data.gov.my/data-catalogue/hh_income_district>)

-   **Poverty Data:** Poverty rates by district (<https://data.gov.my/data-catalogue/hh_poverty_district>)

-   **Crime Data:** Crime rates by district (<https://data.gov.my/data-catalogue/crime_district>)

-   **Malaysia - Subnational Administrative Boundaries:** (<https://data.humdata.org/dataset/cod-ab-mys?>)

## **Packages**

-   **olsrr**: Provides tools for building and validating OLS regression models with stepwise selection and diagnostics.

-   **ggstatsplot**: Extends ggplot2 with statistical tests and data visualization in a single, user-friendly syntax.

-   **sf**: Provides a standardized way to work with spatial vector data (points, lines, polygons).

-   **tmap**: Creates thematic maps with interactive and static modes for spatial visualization.

-   **tidyverse**: A collection of packages for easy data manipulation, visualization, and analysis.

-   **performance**: Offers tools to assess, validate, and compare regression models.

-   **see**: Supplies visual themes and color palettes to enhance ggplot2 visualizations.

-   **sfdep**: Provides spatial dependency analysis tools specifically for sf objects.

-   **GWmodel**: Implements geographically weighted regression (GWR) and spatial analysis methods.

-   **lubridate**: Simplifies the handling and manipulation of dates and times.

```{r}
pacman::p_load(olsrr, ggstatsplot, sf, tmap, tidyverse, performance, see, sfdep, GWmodel, lubridate)
```

## UI Design

### Motivation

Using Geographically Weighted Regression (GWR) to explore the relationship between crime rates and socioeconomic factors like household income, income inequality, and poverty allows us to understand how these factors influence crime spatially rather than uniformly across all regions. This approach is motivated by the premise that socio-economic conditions impact crime differently depending on local contexts—certain areas with high poverty may experience more crime due to limited economic opportunities, while other regions might be more influenced by income inequality. By applying GWR, we can identify these spatial variations and better understand where and how each factor contributes to crime. This spatial insight not only refines our understanding of the socio-economic drivers of crime but also supports the development of targeted interventions, enabling policymakers to address crime in a more focused and locally relevant manner.

A Shiny app could visualize the spatial relationship between crime rates and socioeconomic factors like household income, income inequality, and poverty by displaying interactive, region-specific maps. Users could toggle between map layers to see how each factor correlates with crime across areas, revealing patterns that vary locally. Adjustable settings, such as bandwidth, would allow users to explore the data at different spatial scales, providing insights into whether socioeconomic conditions affect crime more strongly in specific regions. Real-time plots and statistics that update based on user inputs would further enhance understanding, making complex spatial relationships clear and actionable for policymakers and communities aiming to develop targeted crime prevention strategies.

### Overall Layout

![](img/overall_ui_layout.png){fig-align="center"}

For the shiny application, three main components will be used for our pages: **`headerPanel`**, **`sidebarPanel`**, and **`mainPanel`**.

-   **Header Panel** : This is the topmost part of the UI where we can put a description of the application or have a navbar where you can navigate different pages. Each page leads to other group members work/part in this project

-   **Sidebar Panel**: This panel would mainly consist of the input controls that the user can play around with to change the map output in the **Main Panel.**

-   **Main Panel** : This is the primary area of the application and it typically contains outputs. The main panel displays the output (like maps, plots, tables, etc.) based on the input given in the sidebar panel. There would be tabsets that allows users to switch between views.

The various details of the UI will be explored as we try to come up with the data inputs below.

## Data

### Aspatial

`read_csv()` of **sf** package will be used to import the aspatial data into R environment.

```{r}
crime <- read_csv("data/aspatial/crime_district.csv")
inequality <- read_csv("data/aspatial/inequality_district.csv")
income <- read_csv("data/aspatial/income_district.csv")
poverty <- read_csv("data/aspatial/poverty_district.csv")
```

### Geospatial

`st_read()` of **sf** package will be used to import Malaysia shapefile into R environment in order to get the polygons representing the borders of the districts of Malaysia.

```{r}
msia = st_read(dsn = "data/geospatial", layer = "mys_admbnda_adm2_unhcr_20210211")
```

## Data Wrangling

Before the UI prototyping can be done let’s see what type of data we are dealing with so that we can better plan for the UI components to be used.

Checking the CRS of the files:

```{r}
st_crs(msia)
```

It seems to be using WGS 84, let's change that to EPSG:3168 instead.

```{r}
msia <- msia %>%
  st_transform(crs = 3168)
```

```{r}
st_crs(msia)
```

Quick glance at the geospatial data:

```{r}
glimpse(msia)
```

Quick glance at the crime data:

```{r}
glimpse(crime)
```

Looking at the crime object we can see that "All" fields is included for both districts and type of crime. We want to filter these columns to make it easier to work with and join with geospatial data.

```{r}
crime_filtered <- crime %>% filter(district != "All")
```

### Date conversion

Taking a look at the other aspatial data:

```{r}
glimpse(income)
```

```{r}
glimpse(inequality)
```

```{r}
glimpse(poverty)
```

Looking at the aspatial data, we can see that the date is just the first day of each year and that the month and day does not matter. We shall just convert the column to just the year.

Since the data for poverty, income, and income inequality only has data for 2019 and 2022, we keep only 2019 and 2022 crime data to match the other data.

```{r}
crime_filtered <- crime_filtered %>%
  mutate(year = year(date))%>%
  select(-date) %>%
  filter(year %in% c(2019, 2022))         
```

```{r}
income <- income %>%
  mutate(year = year(date))%>%
  select(-date)           
```

```{r}
poverty <- poverty %>%
  mutate(year = year(date))%>%
  select(-date)           
```

```{r}
inequality <- inequality %>%
  mutate(year = year(date))%>%
  select(-date)           
```

### Check for empty rows

```{r}
na <- crime_filtered %>%
  summarise(na_district = sum(is.na(district)),
            na_category = sum(is.na(category)),
            na_type = sum(is.na(type)),
            na_date = sum(is.na(date)),
            na_crimes = sum(is.na(crimes))
            )
print(na)
```

```{r}
na <- inequality %>%
  summarise(na_district = sum(is.na(district)),
            na_date = sum(is.na(date)),
            na_gini = sum(is.na(gini))
            )
print(na)
```

```{r}
na <- poverty %>%
  summarise(na_district = sum(is.na(district)),
            na_date = sum(is.na(date)),
            na_poverty_absolute = sum(is.na(poverty_absolute)),
            na_poverty_relative = sum(is.na(poverty_relative)),
            )
print(na)
```

```{r}
na <- income %>%
  summarise(na_district = sum(is.na(district)),
            na_date = sum(is.na(date)),
            na_poverty_income_mean = sum(is.na(income_mean)),
            na_poverty_income_median = sum(is.na(income_median)),
            )
print(na)
```

### Mismatched district names

District names in `crime_filtered` that are not in district names of `msia`.

```{r}
setdiff(unique(crime_filtered$district), unique(msia$ADM2_EN))
```

District names in `income` that are not in district names of `msia`.

```{r}
setdiff(unique(income$district), unique(msia$ADM2_EN))
```

District names in `inequality` that are not in district names of `msia`.

```{r}
setdiff(unique(inequality$district), unique(msia$ADM2_EN))
```

District names in `poverty` that are not in district names of `msia`.

```{r}
setdiff(unique(poverty$district), unique(msia$ADM2_EN))
```

There is no easy way to fix this but to google the districts mentioned in crime and try to map it as close as close to the district in the sf file.

We shall create a function for renaming the districts in the aspatial data to match that of the geospatial data:

```{r}
rename_districts <- function(data) {
  data <- data %>%
    mutate(district = case_when(
      district %in% c("Iskandar Puteri", "Nusajaya", "Johor Bahru Selatan", "Johor Bahru Utara", "Seri Alam") ~ "Johor Bahru",
      district == "Bandar Bharu" ~ "Bandar Baharu",
      district %in% c("Brickfields", "Cheras", "Dang Wangi", "Sentul", "Wangsa Maju","W.P. Kuala Lumpur") ~ "WP. Kuala Lumpur",
      district == "Nilai" ~ "Seremban",
      district == "Cameron Highland" ~ "Cameron Highlands",
      district == "Kuala Lipis" ~ "Lipis",
      district %in% c("Batu Gajah", "Ipoh") ~ "Kinta",
      district == "Gerik" ~ "Ulu Perak",
      district == "Manjung" ~ "Manjung (Dinding)",
      district == "Pangkalan Hulu" ~ "Ulu Perak",
      district %in% c("Selama", "Taiping", "Larut dan Matang") ~ "Larut Dan Matang",
      district == "Sungai Siput" ~ "Kuala Kangsar",
      district %in% c("Tanjong Malim", "Tapah", "Bagan Datuk", "Muallim") ~ "Batang Padang",
      district %in% c("Arau", "Kangar", "Padang Besar") ~ "Perlis",
      state == "Pulau Pinang" & district == "Seberang Perai Selatan" ~ "S.P.Selatan",
      district == "Seberang Perai Tengah" ~ "S.P. Tengah",
      district == "Seberang Perai Utara" ~ "S.P. Utara",
      district == "Ampang Jaya" ~ "Gombak",
      district == "Kajang" ~ "Ulu Langat",
      district %in% c("Pengkalan Hulu","Hulu Perak") ~ "Ulu Perak",
      district == "Hulu Selangor" ~ "Ulu Selangor",
      district %in% c("Klang Selatan", "Klang Utara") ~ "Klang",
      district %in% c("Petaling Jaya", "Serdang", "Sg. Buloh", "Shah Alam", "Subang Jaya", "Sungai Buloh") ~ "Petaling",
      district == "Kota Kinabatangan" ~ "Kinabatangan",
      district == "Kota Samarahan" ~ "Samarahan",
      district %in% c("Matu Daro", "Tanjung Manis") ~ "Mukah",
      district == "Padawan" ~ "Kuching",
      district == "Kulai" ~ "Kulaijaya",
      district == "Tangkak" ~ "Ledang",
      district == "Kecil Lojing" ~ "Gua Musang",
      district == "Kalabakan" ~ "Tawau",
      district == "Telupid" ~ "Beluran",
      district == "Beluru" ~ "Miri",
      district == "Bukit Mabong" ~ "Kapit",
      district == "Kabong" ~ "Saratok",
      district == "Maradong" ~ "Meradong",
      district == "Pusa" ~ "Betong",
      district == "Sebauh" ~ "Bintulu",
      district == "Subis" ~ "Miri",
      district == "Tebedu" ~ "Serian",
      district == "Telang Usan" ~ "Marudi",
      district == "Kuala Nerus" ~ "Kuala Terengganu",
      TRUE ~ district
    ))
  
  return(data)
}

```

Apply the renaming function to crime data:

```{r}
crime_filtered <- rename_districts(crime_filtered)
```

Remove and combine duplicates data that are considered to be in the same district after renaming:

```{r}
crime_filtered <- crime_filtered %>%
  group_by(state, district, category, type, year) %>% 
  summarize(crimes = sum(crimes), .groups = 'drop')
```

Do the same for the other aspatial data:

```{r}
income <- rename_districts(income)
```

```{r}
income <- income %>%
  group_by(state, district, year) %>% 
  summarize(
    income_mean = sum(income_mean),
    income_median = sum(income_median),
    .groups = 'drop'
  )
```

```{r}
inequality <- rename_districts(inequality)
```

```{r}
inequality <- inequality %>%
  group_by(state, district, year) %>% 
  summarize(
    inequality = sum(gini),
    .groups = 'drop'
  )
```

```{r}
poverty <- rename_districts(poverty)
```

```{r}
poverty <- poverty %>%
  group_by(state, district, year) %>% 
  summarize(
    poverty_relative = sum(poverty_relative),
    poverty_absolute = sum(poverty_absolute),
    .groups = 'drop'
  )
```

Check if there is still any mismatched district names:

```{r}
setdiff(unique(crime_filtered$district), unique(msia$ADM2_EN))
```

```{r}
setdiff(unique(income$district), unique(msia$ADM2_EN))
```

```{r}
setdiff(unique(inequality$district), unique(msia$ADM2_EN))
```

```{r}
setdiff(unique(poverty$district), unique(msia$ADM2_EN))
```

### Joining of data

Joining the aspatial data together

```{r}
combined_data <- crime_filtered %>%
  left_join(poverty, by = c("state", "district", "year")) %>%
  left_join(inequality, by = c("state", "district", "year")) %>%
  left_join(income, by = c("state", "district", "year"))

```

Filtering out redundant data and keep only relevant data

```{r}
msia_geometry <- msia %>%
  select(1, 13:15)
```

Joining with geospatial data

```{r}
combined_data <- combined_data %>%
  left_join(msia_geometry, by = c("district" = "ADM2_EN"))
```

## GWR

### Type of crime selection

For our Shiny app, we would like user to be able to freely choose the type of crime for their own viewing. This could be the individual types or all of the types.

To get types of crime to only be `murder`:

```{r}
combined_data_murder <- combined_data %>%
  filter(type == "murder")
```

To get types of crime to only be `causing_injury`:

```{r}
combined_data_injury <- combined_data %>%
  filter(type == "causing_injury")
```

To get types of crime to be `all`:

```{r}
combined_data_all <- combined_data %>%
  filter(type == "all")
```

To get types of crime to be `causing_injury` and `murder`in `2022` only:

```{r}
combined_data_filtered <- combined_data %>%
  filter(type %in% c("causing_injury", "murder") & year %in% c(2022))
```

While using `filter(type == "causing_injury")` is concise but `filter(type %in% c("causing_injury"))` allows the flexibility for one or more independent variables. This is beneficial for us when we want to allow users to have the freedom to select their own variable(s).

### Correlation matrix

We would also like for the user to be able to view the correlation matrix so that they can freely choose which independent variables to be used on GWR conducted in our application.

For murder cases:

```{r}
ggcorrmat(combined_data_murder[, 6:11])
```

For causing injury cases:

```{r}
ggcorrmat(combined_data_injury[, 6:11])
```

An interesting parameter that can be included in `ggcorrmat()` is that we can choose the significance level of the matrix. This allows user to have more control over viewing the correlation.

```{r}
ggcorrmat(combined_data_all[, 6:11], sig.level = 0.05)
```

Note: Income median and mean are highly correlated since they are similar and came from the same data set. Either of the variable might be removed for GWR in the Shiny App.

![](img/corr_anal.png)

The correlation analysis will be under a tabset where user can toggle from the main GWR. On the side panel **`checkboxGroupInput()`** will be used to select the independent variables that the user wants to view and **`sliderInput()`** will be used for them to select the significance level of the correlation matrix.

### Linear regression model

To allow user is able to freely select which independent variables and type of crimes we need to create a function that dynamically accepts inputs.

```{r}
run_regression <- function(data, response, predictors) {
  # Create formula from response and predictors
  formula <- as.formula(
    paste(response, "~", paste(predictors, collapse = " + "))
  )
  
  # Run the linear model
  model <- lm(formula = formula, data = data)
  
  return(model)
}

```

An example of using this function with all the variables as the independent variables and only using murder as the type of crime:

```{r}
# Define predictors as a vector of variable names
predictors <- c("poverty_relative", "poverty_absolute", "inequality", "income_mean", "income_median")

# Run the function with the specified data and predictors
murder_model <- run_regression(
  data = combined_data_murder,
  response = "crimes",
  predictors = predictors
)

ols_regress(murder_model)
```

An example of using this function with `poverty absolute, inequality and median income` as the independent variables and all type of crime:

```{r}
# Define predictors as a vector of variable names
predictors <- c("poverty_absolute", "inequality", "income_median")

# Run the function with the specified data and predictors
all_model <- run_regression(
  data = combined_data_all,
  response = "crimes",
  predictors = predictors
)

ols_regress(all_model)
```

### Stepwise regression model selection

While allowing user the freedom of controlling the model used, we should provide information for them to choose model that suit their needs.

Function for selecting the type of stepwise regression:

```{r}
run_stepwise_selection <- function(model, direction = "forward", p_val = 0.05, details = FALSE) {
  if (!direction %in% c("forward", "backward", "both")) {
    stop("Invalid direction. Choose from 'forward', 'backward', or 'both'.")
  }
  
  stepwise_model <- switch(
    direction,
    "forward" = ols_step_forward_p(model, p_val = p_val, details = details),
    "backward" = ols_step_backward_p(model, p_val = p_val, details = details),
    "both" = ols_step_both_p(model, p_val = p_val, details = details)
  )
  
  return(stepwise_model)
}
```

#### Forward selection

```{r}
murder_fw_mlr <- run_stepwise_selection(
  model = murder_model,
  direction = "forward",
  p_val = 0.05,
  details = FALSE
)

print(murder_fw_mlr)
```

#### Backward Elimination

```{r}
murder_bw_mlr <- run_stepwise_selection(
  model = murder_model,
  direction = "backward",
  p_val = 0.05,
  details = FALSE
)

print(murder_bw_mlr)
```

#### Bidirectional Elimination

```{r}
murder_sb_mlr <- run_stepwise_selection(
  model = murder_model,
  direction = "both",
  p_val = 0.05,
  details = FALSE
)

print(murder_sb_mlr)
```

### Visualising model metrics

```{r}
metric <- compare_performance(murder_model, 
                    murder_fw_mlr$model,
                    murder_bw_mlr$model,
                    murder_sb_mlr$model)
```

```{r}
metric$Name <- gsub(".*\\\\([a-zA-Z0-9_]+)\\\\, \\\\model\\\\.*", "\\1", metric$Name)
```

```{r}
#| fig-width: 10
#| fig-height: 8
plot(metric)
```

While the plot looks fine, the naming of the models are confusing and special care should be taken to ensure that they are indicative to the reader what model this is.

![](img/model_sel.png)

The correlation analysis will be under a tabset where user can toggle from the main GWR. On the side panel, **`checkboxGroupInput()`** will be used to select the independent variables that the user wants to view, **`selectInput()`** will be used to select the type of crimes, another **`checkboxGroupInput()`** to select the year(s) and **`sliderInput()`** will be used for them to select the p value of the regression models.

### Checks

#### Linearity test

```{r}
out <- plot(check_model(murder_sb_mlr$model, 
                        panel = FALSE))
out[[2]]
```

#### Normality test

```{r}
plot(check_normality(murder_sb_mlr$model))
```

A histogram might be a better approach for user to tell the distribution at a glance instead.

```{r}
ols_plot_resid_hist(murder_sb_mlr$model)
```

#### Outliers

```{r}
plot(check_outliers(murder_sb_mlr$model,
                           method = "cook"))
```

#### Multicollinearity

```{r}
plot(check_collinearity(murder_sb_mlr$model)) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

![](img/checks.png)

The checks will be made up of the multicollinearity, normality, outliers, and collinearity graphs. It will be under a tabset where user can toggle from the main GWR. On the side panel, **`checkboxGroupInput()`** will be used to select the independent variables that the user wants to view, **`selectInput()`** will be used to select the type of crimes, another **`checkboxGroupInput()`** to select the year(s).

#### Testing for Spatial Autocorrelation

```{r}
mlr_output <- as.data.frame(murder_sb_mlr$model$residuals) %>%
  rename(`SB_MLR_RES` = `murder_sb_mlr$model$residuals`)
```

Due to empty rows we need to pad "NA"

```{r}
murder_residual <- data.frame(MLR_RES = rep(NA, nrow(combined_data_murder)))

murder_residual[rownames(mlr_output), "MLR_RES"] <- mlr_output$SB_MLR_RES
```

```{r}
combined_data_murder <- cbind(combined_data_murder, 
                        murder_residual)
```

```{r}
combined_data_murder_st <- st_as_sf(combined_data_murder)
```

Visualising:

```{r}
tmap_mode("view")
tm_shape(combined_data_murder_st) +
  tm_polygons(col = "MLR_RES", alpha = 0.6)+
  tm_view(set.zoom.limits = c(5, 9))
tmap_mode("plot")
```

Further tests for spatial autocorrelation will be done by my group mate.

### GWmodel

#### Compute bandwith

Filter out rows with NA or Inf in the relevant columns:

```{r}
combined_data_murder_st_clean <- combined_data_murder_st %>%
  filter(
    !is.na(crimes) & !is.na(poverty_relative) & !is.na(poverty_absolute) &
    !is.na(inequality) & !is.na(income_mean) & !is.na(income_median) &
    is.finite(crimes) & is.finite(poverty_relative) & is.finite(poverty_absolute) &
    is.finite(inequality) & is.finite(income_mean) & is.finite(income_median)
  )
```

Users will be able to choose for:

-   `approach` - CV or AIC corrected

-   `kernel`- gaussian, exponential, bisquare, tricube

-   `adaptive` - true or false (adaptive or fixed bandwidth)

```{r}
bw.fixed <- bw.gwr(formula = crimes ~ poverty_relative + poverty_absolute + inequality +
                     income_mean + income_median, 
                   data=combined_data_murder_st_clean, 
                   approach="CV", 
                   kernel="gaussian", 
                   adaptive=FALSE, 
                   longlat=FALSE)
```

```{r}
gwr.fixed <- gwr.basic(formula = crimes ~ poverty_relative + poverty_absolute + inequality +
                     income_mean + income_median, 
                       data=combined_data_murder_st_clean, 
                       bw=bw.fixed, 
                       kernel = 'gaussian', 
                       longlat = FALSE)
```

```{r}
gwr.fixed
```

```{r}
combined_data_murder_st_clean_adaptive <- st_as_sf(gwr.fixed$SDF) %>%
  st_transform(crs=3168)
```

#### Visualising

This map shows the local R2

```{r}
tmap_mode("view")
tm_shape(combined_data_murder_st_clean_adaptive) +
  tm_polygons(col = "Local_R2", alpha = 0.6) +
  tm_view(set.zoom.limits = c(5, 9))
tmap_mode("plot")
```

This would show the local R2 on the left and coefficent estimates on the right to allow comparison on how well the local regression model explains the coefficent estimates.

```{r}
tmap_mode("view")

Local_R2 <- tm_shape(combined_data_murder_st_clean_adaptive) +
  tm_polygons(col = "Local_R2", alpha = 0.6) +
  tm_view(set.zoom.limits = c(5, 9))

Inequality_TV <- tm_shape(combined_data_murder_st_clean_adaptive) +
  tm_polygons(col = "inequality_TV", alpha = 0.6) +
  tm_view(set.zoom.limits = c(5, 9))

tmap_arrange(Local_R2, Inequality_TV, asp = 1, ncol = 2, sync = TRUE)

tmap_mode("plot")

```

![](img/gwr.png)

This will be the main tabset. On the side panel, **`checkboxGroupInput()`** will be used to select the independent variables that the user wants to view, **`selectInput()`** will be used to select the type of crimes, another **`checkboxGroupInput()`** to select the year(s). The three **`selectInput()`** at the bottom of the side panel will be used to control the bandwidth computation parameters.

## Conclusion

```{r}

```

```{r}

```
