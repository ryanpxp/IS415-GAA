---
title: "Take-home Exercise 02: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level"
author: "Ryan Peh"
date: "September 25, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Background

Drug abuse is associated with significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. In 2021, 1 in 17 people aged 15â€“64 in the world had used a drug in the past 12 months. Notwithstanding population growth, the estimated number of drug users grew from 240 million in 2011 to 296 million in 2021.

The geopolitics of Thailand which is near the [Golden Triangle](https://en.wikipedia.org/wiki/Golden_Triangle_(Southeast_Asia)) of Indochina, the largest drug production site in Asia, and the constant transportation infrastructure development made Thailand became market and transit routes for drug trafficking to the third countries.

In Thailand, drug abuse is one of the major social issue. There are about 2.7 million youths using drugs in Thailand. Among youths aged between 15 and 19 years, there are about 300,000 who have needs for drug treatment. Most of Thai youths involved with drugs are vocational-school students, which nearly doubles in number compared to secondary-school students.

# **Objectives**

As a curious geospatial analytics green horn, you are interested to discover:

-   if the key indicators of drug abuse of Thailand are independent from space.

-   If the indicators of drug abuse is indeed spatial dependent, then, to detect where are the clusters and outliers, and the hotspots.

-   Last but not least, to investigate how the observation above evolve over time.

# **The Task**

The specific tasks of this take-home exercise are as follows:

-   Using appropriate function of **sf** and **tidyverse**, preparing the following geospatial data layer:

    -   a study area layer in sf polygon features. It must be at [province level](https://en.wikipedia.org/wiki/Provinces_of_Thailand) (including Bangkok) of Thailand.

    -   a drug abuse indicators layer within the study area in sf polygon features.

-   Using the extracted data, perform global spatial autocorrelation analysis by using [sfdep methods](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-glsa).

-   Using the extracted data, perform local spatial autocorrelation analysis by using [sfdep methods](https://r4gdsa.netlify.app/chap10.html).

-   Describe the spatial patterns revealed by the analysis above.

# **The Data**

For the purpose of this take-home exercise, two data sets shall be used, they are:

-   [Thailand Drug Offenses \[2017-2022\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-drug-offenses-2017-2022) at Kaggle.

-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) at HDX. You are required to use the province boundary data set.

# Importing Package

## **Dependencies**

Loading the required packages

1.  **sf :** Needed to handle spatial data through the new simple features standard

2.  **tmap :** Create thematic maps, particularly chloropleth maps in our case

3.  **tidyverse :** For easy data manipulation and some visualisation

4.  **sfdep :** Spatial dependence with spatial features, the highlight of this take home exercise. The spacetime object is particularly useful

5.  **ggplot2** : For creating advanced visualisations, graphics and maps using the Grammar of Graphics.

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse, ggplot2)
```

## Geospatial data

`st_read()` of **sf** package will be used to import Thailand shapefile into R environment in order to get the polygons representing the borders of the provinces in Thailand.

```{r}
thai <- st_read(dsn = "data/raw/Thailand_shp", 
                 layer = "tha_admbnda_adm1_rtsd_20220121")
```

Next, we will generate a plot of the `thai` object to visualise its structure.

```{r}
#| warning: false
tm_shape(thai) + 
  tm_fill("ADM1_EN",
          title = "Study Area: Thailand Provinces",
          palette = "inferno") +
  tm_borders() +
  tm_layout(legend.show = FALSE)
```

## Aspatial data

`read_csv()` of **sf** package will be used to import the drug offences in the from of csv file into R environment. The output is R dataframe class.

```{r}
drugs <- read_csv("data/raw/thai_drug_offenses_2017_2022.csv")
```

# Wrangling

## Mismatched Province

By checking on the naming of the province from both the geospatial and aspatial data, we can see that some of the namings are mismatched. This would cause problems when handling the data.

```{r}
comparison_df <- data.frame(
  Geospatial = sort(unique(thai$ADM1_EN)),
  Aspatial = sort(unique(drugs$province_en))
)

print(comparison_df)
```

The identified mismatches are:

| Geospatial         | Aspatial         |
|--------------------|------------------|
| Bueng Kan (Line 4) | buogkan (Line 4) |
| Lop Buri (Line 22) | Loburi (Line 21) |

We will have to change these province names in the aspatial data to match those in the geospatial daata.

::: panel-tabset
### The code

```{r}
drugs <- drugs %>%
  mutate(province_en = recode(province_en,
                              "buogkan" = "Bueng Kan",
                              "Loburi" = "Lop Buri"))

```

### Checking the output

We can see that both **buogkan** and **Loburi** is now changed into **Bueng** **Kan** and **Lop** **Buri**

```{r}
print(sort(unique(drugs$province_en)))
```
:::

## Exclusion of suspected drug offences

Taking a peek at the type of drug offenses:

```{r}
unique(drugs$types_of_drug_offenses)
```

From the above output, the types of offences in the aspatial data includes suspected crimes.

While including suspected crimes have its advantages such as insights to emerging crime hotspots. However, the following are the reasons I have decided to exclude suspected cases:

**Accuracy and Precision**: Suspected cases may not be confirmed as actual crimes, so including them could overestimate crime rates and lead to misleading conclusions. This can distort the spatial patterns and cause unnecessary alarm in areas where crimes were not ultimately verified.

**Data Quality and Reliability**: Suspected cases might introduce bias due to inconsistencies in how they are reported or defined across regions. For robust analysis, it's often better to focus on confirmed cases to ensure the data's reliability and comparability.

Therefore, we will be extracting only the confirmed cases from the types of drug offenses in the aspatial data for analysis.

```{r}
confirmed_drug_offenses <- c(
  "drug_use_cases", "possession_cases", "possession_with_intent_to_distribute_cases", "trafficking_cases", "production_cases", "import_cases", "export_cases", "conspiracy_cases"
)

```

We will also break up the data into years to look out for trends.

```{r}
#| eval: false
drugs_by_year <- list()

for (year in 2017:2022) {
  drugs_by_year[[as.character(year)]] <- left_join(thai, drugs, by = c("ADM1_EN" = "province_en")) %>%
    dplyr::select(1:3, 17:19,21) %>%
    filter(fiscal_year == year, types_of_drug_offenses %in% confirmed_drug_offenses)
}

```

To speed up the process of loading the dataset in the future, we save the processed data.

```{r}
#| eval: false
write_rds(drugs_by_year, "data/rds/drugs_by_year.rds")
```

```{r}
drugs_by_year <- read_rds("data/rds/drugs_by_year.rds")
```

Checking the types of drug offences:

```{r}
unique(drugs_by_year[["2018"]]$types_of_drug_offenses)
```

We can see that the suspected cases are now removed from the aspatial data.

## Neighbour data

### Study area

This is a geographical map of Thailand's Provinces retrieved from Wikipedia.

![Breakdown of Provinces of Thailand](img\Thailand_provinces_en.svg.png){width="100%" style="object-fit: contain;"}

Looking at the above geographical map, we can see that vertical, horizontal and diagonal neighbours of the province are close enough to travel to and influence each other. Hence, we would be using **Queen's contiguity** neighbour criteria.

### Disconnection of neighbours

To get a quick view on the neighbours of the provinces, we can plot out the neighbours.

```{r}
# Calculate contiguity neighbors
nb <- st_contiguity(thai$geometry)
```

Running the code produces warnings on some observations having no neighbours. It also indicated that the graph has split into 2 sub-graphs.

To do further investigations, plotting the neighbours would provide a quick overview of what is happening.

```{r}
#| warning: false
plot(st_geometry(thai), border = 'gray')
plot(nb, st_geometry(thai), col = 'red', add = TRUE)

```

On closer inspecting, one of the province in the bottom left is disconnected from the rest. By referencing the geographical map of Thailand, it appears to be **Phuket** that is disconnected from the rest.

![Close-up of neighbour plot](img\Neighbour_phuket_plot.png){width="100%" style="object-fit: contain;"} To verify that **Phuket** is indeed the disconnected region, we can check the summary.

```{r}
summary(nb)
```

From the above we can see that region number 67 is without any neighbours. To retrieve the name of region 67 (index 67 in `nb`):

```{r}
thai$ADM1_EN[67]
```

It is confirmed that **Phuket** is disconnected from the rest.

![Phuket Region](img\Phuket_region.png){width="100%" style="object-fit: contain;"} Looking at the map, we can see that while **Phuket** is disconnected by water body, we can considered it to be the neighbour of **Phangnga**.

```{r}
which(unique(thai$ADM1_EN) == "Phangnga")
```

From the code above, we now know the number for the **Phangnga** region (number 67) and we will manually add **Phuket** to **Phangnga** and **Phangnga** to **Phuket**.

Adding **Phuket** to **Phangnga**

::: callout-warning
## This code is not idempotent!
:::

```{r}
nb[[66]] <- c(nb[[66]], as.integer(67))
```

Adding **Phangnga** to **Phuket**

```{r}
nb[[67]] <- as.integer(c(66))
```

Ensure that all regions are connected:

```{r}
summary(nb)
```

**Phuket** and **Phangnga** should now be connected when plotting the neighbour

```{r}
#| warning: false
plot(st_geometry(thai), border = 'gray')
plot(nb, st_geometry(thai), col = 'red', add = TRUE)
```

## Setting of seed

Lastly, in order to make the data reproducible we would set the seed to a specify value.

```{r}
set.seed(12345)
```

# Global Moran's I Test

In order to evaluate spatial autocorrelation in our dataset, or to determine whether drug cases tend to cluster within specific provinces, we run Global Moran's Test.

We have to first add the neighbours and the weights of the neighbours as columns to the dataset.

::: panel-tabset
### 2017

```{r}
#| eval: false
wm_q2017 <- drugs_by_year[["2017"]] %>%
  group_by(ADM1_EN) %>%  
  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  
  ungroup() %>%
  mutate(nb = nb,  
         wt = st_weights(nb, style = "W"),  
         .before = 1)
```

```{r}
#| echo: false
#| eval: false
write_rds(wm_q2017, "data/rds/wm_q2017.rds")
```

```{r}
#| echo: false
wm_q2017 <- read_rds("data/rds/wm_q2017.rds")
```

### 2018

```{r}
#| eval: false
wm_q2018 <- drugs_by_year[["2018"]] %>%
  group_by(ADM1_EN) %>%  
  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  
  ungroup() %>%
  mutate(nb = nb,  
         wt = st_weights(nb, style = "W"), 
         .before = 1)

glimpse(wm_q2018)

```

```{r}
#| echo: false
#| eval: false
write_rds(wm_q2018, "data/rds/wm_q2018.rds")
```

```{r}
#| echo: false
wm_q2018 <- read_rds("data/rds/wm_q2018.rds")
```

### 2019

```{r}
#| eval: false
wm_q2019 <- drugs_by_year[["2019"]] %>%
  group_by(ADM1_EN) %>%  
  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  
  ungroup() %>%
  mutate(nb = nb,  
         wt = st_weights(nb, style = "W"),  
         .before = 1)

glimpse(wm_q2019)

```

```{r}
#| echo: false
#| eval: false
write_rds(wm_q2019, "data/rds/wm_q2019.rds")
```

```{r}
#| echo: false
wm_q2019 <- read_rds("data/rds/wm_q2019.rds")
```

### 2020

```{r}
#| eval: false
wm_q2020 <- drugs_by_year[["2020"]] %>%
  group_by(ADM1_EN) %>% 
  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  # Summarize cases per province
  ungroup() %>%
  mutate(nb = nb,  
         wt = st_weights(nb, style = "W"), 
         .before = 1)

glimpse(wm_q2020)

```

```{r}
#| echo: false
#| eval: false
write_rds(wm_q2020, "data/rds/wm_q2020.rds")
```

```{r}
#| echo: false
wm_q2020 <- read_rds("data/rds/wm_q2020.rds")
```

### 2021

```{r}
#| eval: false
wm_q2021 <- drugs_by_year[["2021"]] %>%
  group_by(ADM1_EN) %>% 
  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  # Summarize cases per province
  ungroup() %>%
  mutate(nb = nb,  
         wt = st_weights(nb, style = "W"), 
         .before = 1)

glimpse(wm_q2021)

```

```{r}
#| echo: false
#| eval: false 
write_rds(wm_q2021, "data/rds/wm_q2021.rds")
```

```{r}
#| echo: false
wm_q2021 <- read_rds("data/rds/wm_q2021.rds")
```

### 2022

```{r}
#| eval: false
wm_q2022 <- drugs_by_year[["2022"]] %>%
  group_by(ADM1_EN) %>% 
  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  # Summarize cases per province
  ungroup() %>%
  mutate(nb = nb,  
         wt = st_weights(nb, style = "W"), 
         .before = 1)

glimpse(wm_q2022)

```

```{r}
#| echo: false
#| eval: false
write_rds(wm_q2022, "data/rds/wm_q2022.rds")
```

```{r}
#| echo: false
wm_q2022 <- read_rds("data/rds/wm_q2022.rds")
```
:::

## Quick glance at global Moran's I test

The assumptions of the test are sensitive to the structure of the neighbor relationship graph and other factors. To validate the results, we will run Global Moran's I tests.

To get a sensing of possible spatial correlation between provinces, we can run the code chunks below first.

::: panel-tabset
### 2017

```{r}
moranI2017 <- global_moran(wm_q2017$no_cases,
                       wm_q2017$nb,
                       wm_q2017$wt)
glimpse(moranI2017)
```

### 2018

```{r}
moranI2018 <- global_moran(wm_q2018$no_cases,
                       wm_q2018$nb,
                       wm_q2018$wt)
glimpse(moranI2018)
```

### 2019

```{r}
moranI2019 <- global_moran(wm_q2019$no_cases,
                       wm_q2019$nb,
                       wm_q2019$wt)
glimpse(moranI2019)
```

### 2020

```{r}
moranI2020 <- global_moran(wm_q2020$no_cases,
                       wm_q2020$nb,
                       wm_q2020$wt)
glimpse(moranI2020)
```

### 2021

```{r}
moranI2021 <- global_moran(wm_q2021$no_cases,
                       wm_q2021$nb,
                       wm_q2021$wt)
glimpse(moranI2021)
```

### 2022

```{r}
moranI2022 <- global_moran(wm_q2022$no_cases,
                       wm_q2022$nb,
                       wm_q2022$wt)
glimpse(moranI2022)
```
:::

From the quick glance, the results are leaning towards no signs of clustering. We should run permutations of the Global Moran's I to investigate further.

## Permutations of Global Moran's I

We will use [`global_moran_perm()`](https://rdrr.io/github/JosiahParry/sfdep/man/global_moran_perm.html) function from **sfdep** package with `nsim = 99`.

::: panel-tabset
### 2017

```{r}
global_moran_perm(wm_q2017$no_cases,
                       wm_q2017$nb,
                       wm_q2017$wt,
                  nsim = 99)
```

### 2018

```{r}
global_moran_perm(wm_q2018$no_cases,
                       wm_q2018$nb,
                       wm_q2018$wt,
                  nsim = 99)
```

### 2019

```{r}
global_moran_perm(wm_q2019$no_cases,
                       wm_q2019$nb,
                       wm_q2019$wt,
                  nsim = 99)
```

### 2020

```{r}
global_moran_perm(wm_q2020$no_cases,
                       wm_q2020$nb,
                       wm_q2020$wt,
                  nsim = 99)
```

### 2021

```{r}
global_moran_perm(wm_q2021$no_cases,
                       wm_q2021$nb,
                       wm_q2021$wt,
                  nsim = 99)
```

### 2022

```{r}
global_moran_perm(wm_q2022$no_cases,
                       wm_q2022$nb,
                       wm_q2022$wt,
                  nsim = 99)
```
:::

## Inference

From the results of the Monte Carlo simulations of Moran's I for the years 2017-2022, we can infer that:

1.  **Moranâ€™s I statistic values** for each year are close to zero (ranging from -0.09 to 0.04), indicating little to no spatial autocorrelation in the distribution of dengue cases. Therefore, the spatial distribution of cases does not show significant clustering or dispersion patterns across the areas analyzed.

2.  **P-values** for all years are much greater than 0.05, ranging from 0.3 to 0.96, which means that we fail to reject the null hypothesis of no spatial autocorrelation. This suggests that we cannot conclude that there are signs of significant spatial clustering.

Overall, the results suggest that the distribution of dengue cases in these years does not show a significant spatial pattern and can be considered random based on Moran's I and Monte Carlo simulations.

# Local Moran's I test

Despite the results from the global Moran's I test not showing significant spatial autocorrelation, it may still be worth performing **local Moran's I**/Local Indicators of Spatial Associationc(LISA) for a more detailed, localized analysis.

Even when global Moran's I suggests no overall spatial autocorrelation, local Moran's I can reveal clusters or outliers at a finer scale. Some areas might still exhibit significant clustering or spatial dependence, which the global test may not detect. For example, there could be pockets of high or low incidence that are spatially clustered even if the overall pattern is random.

The code chunk below will generate the **local Moran's I** for each individual years.

::: panel-tabset
### 2017

```{r}
lisa2017 <- wm_q2017 %>% 
  mutate(local_moran = local_moran(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

### 2018

```{r}
lisa2018 <- wm_q2018 %>% 
  mutate(local_moran = local_moran(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

### 2019

```{r}
lisa2019 <- wm_q2019 %>% 
  mutate(local_moran = local_moran(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

### 2020

```{r}
lisa2020 <- wm_q2020 %>% 
  mutate(local_moran = local_moran(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

### 2021

```{r}
lisa2021 <- wm_q2021 %>% 
  mutate(local_moran = local_moran(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

### 2022

```{r}
lisa2022 <- wm_q2022 %>% 
  mutate(local_moran = local_moran(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```
:::

## Skewness of the LISA

In order to identify if we should use p_ii or ii values for the visualisation, we need to identify how skewed the data are.

::: panel-tabset
### 2017

```{r}
num_greater_than_05 <- sum(abs(lisa2017$skewness) > 0.5)
percentage <- (num_greater_than_05 / nrow(lisa2017)) * 100

print(paste0("Percentage of rows with abs(skewness) > 0.5: ", round(percentage, 2), "%"))

```

```{r}

ggplot(lisa2017, aes(x = skewness)) +
  geom_histogram(bins = 20, fill = "coral", color = "black") +
  geom_vline(xintercept = 0, color = "red", linetype = "dashed", linewidth = 1) +
  labs(title = "Distribution of Skewness",
       x = "Skewness",
       y = "Frequency") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14))

```

### 2018

```{r}
num_greater_than_05 <- sum(abs(lisa2018$skewness) > 0.5)
percentage <- (num_greater_than_05 / nrow(lisa2018)) * 100

print(paste0("Percentage of rows with abs(skewness) > 0.5: ", round(percentage, 2), "%"))

```

```{r}
ggplot(lisa2018, aes(x = skewness)) +
  geom_histogram(bins = 20, fill = "coral", color = "black") +
  geom_vline(xintercept = 0, color = "red", linetype = "dashed", linewidth = 1) +
  labs(title = "Distribution of Skewness",
       x = "Skewness",
       y = "Frequency") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14))
```

### 2019

```{r}
num_greater_than_05 <- sum(abs(lisa2019$skewness) > 0.5)
percentage <- (num_greater_than_05 / nrow(lisa2019)) * 100

print(paste0("Percentage of rows with abs(skewness) > 0.5: ", round(percentage, 2), "%"))

```

```{r}
ggplot(lisa2019, aes(x = skewness)) +
  geom_histogram(bins = 20, fill = "coral", color = "black") +
  geom_vline(xintercept = 0, color = "red", linetype = "dashed", linewidth = 1) +
  labs(title = "Distribution of Skewness",
       x = "Skewness",
       y = "Frequency") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14))
```

### 2020

```{r}
num_greater_than_05 <- sum(abs(lisa2020$skewness) > 0.5)
percentage <- (num_greater_than_05 / nrow(lisa2020)) * 100

print(paste0("Percentage of rows with abs(skewness) > 0.5: ", round(percentage, 2), "%"))

```

```{r}
ggplot(lisa2020, aes(x = skewness)) +
  geom_histogram(bins = 20, fill = "coral", color = "black") +
  geom_vline(xintercept = 0, color = "red", linetype = "dashed", linewidth = 1) +
  labs(title = "Distribution of Skewness",
       x = "Skewness",
       y = "Frequency") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14)) 
```

### 2021

```{r}
num_greater_than_05 <- sum(abs(lisa2021$skewness) > 0.5)
percentage <- (num_greater_than_05 / nrow(lisa2021)) * 100

print(paste0("Percentage of rows with abs(skewness) > 0.5: ", round(percentage, 2), "%"))
```

```{r}
ggplot(lisa2021, aes(x = skewness)) +
  geom_histogram(bins = 20, fill = "coral", color = "black") +
  geom_vline(xintercept = 0, color = "red", linetype = "dashed", linewidth = 1) +
  labs(title = "Distribution of Skewness",
       x = "Skewness",
       y = "Frequency") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14))
```

### 2022

```{r}
num_greater_than_05 <- sum(abs(lisa2022$skewness) > 0.5)
percentage <- (num_greater_than_05 / nrow(lisa2022)) * 100

print(paste0("Percentage of rows with abs(skewness) > 0.5: ", round(percentage, 2), "%"))

```

```{r}
ggplot(lisa2022, aes(x = skewness)) +
  geom_histogram(bins = 20, fill = "coral", color = "black") +
  geom_vline(xintercept = 0, color = "red", linetype = "dashed", linewidth = 1) +
  labs(title = "Distribution of Skewness",
       x = "Skewness",
       y = "Frequency") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14))
```
:::

Since the data is evidently skewed for all the years, we would use the median instead of the mean to visualise the data.

## Visualising Local Spatial Autocorrelation Map and Significance Map

We will be using the `tmap` package to visualize spatial patterns by generating two side-by-side thematic maps for each years' local Moran's I.

::: panel-tabset
### 2017

```{r}
map1 <- tm_shape(lisa2017) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of No of cases",
            main.title.size = 0.8)

map2 <- tm_shape(lisa2017) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
          labels = c("0.001", "0.01", "0.05", "Not sig"),
          palette = "-Purples") +   
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value of Local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### 2018

```{r}
map1 <- tm_shape(lisa2018) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6, 8)) +
  tm_layout(main.title = "Local Moran's I of No of Cases",
            main.title.size = 0.8)

map2 <- tm_shape(lisa2018) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
          labels = c("0.001", "0.01", "0.05", "Not sig"),
          palette = "-Purples") +   
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value of Local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### 2019

```{r}
map1 <- tm_shape(lisa2019) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of No of cases",
            main.title.size = 0.8)

map2 <- tm_shape(lisa2019) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
          labels = c("0.001", "0.01", "0.05", "Not sig"),
          palette = "-Purples") +   
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value of Local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### 2020

```{r}
map1 <- tm_shape(lisa2020) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of No of cases",
            main.title.size = 0.8)

map2 <- tm_shape(lisa2020) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
          labels = c("0.001", "0.01", "0.05", "Not sig"),
          palette = "-Purples") +   
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value of Local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### 2021

```{r}
map1 <- tm_shape(lisa2021) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of No of cases",
            main.title.size = 0.8)

map2 <- tm_shape(lisa2021) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
          labels = c("0.001", "0.01", "0.05", "Not sig"),
          palette = "-Purples") +   
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value of Local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### 2022

```{r}
map1 <- tm_shape(lisa2022) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of No of cases",
            main.title.size = 0.8)

map2 <- tm_shape(lisa2022) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
          labels = c("0.001", "0.01", "0.05", "Not sig"),
          palette = "-Purples") +   
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value of Local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```
:::

## Visualising Statistically Significant Local Spatial Autocorrelation Map

In order to better provide a comprehensive view of spatial autocorrelation, we will specifically be focusing on statistically significant areas only.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false
lisa2017_sig <- lisa2017 %>% filter(p_ii < 0.05)
lisa2018_sig <- lisa2018 %>% filter(p_ii < 0.05)
lisa2019_sig <- lisa2019 %>% filter(p_ii < 0.05)
lisa2020_sig <- lisa2020 %>% filter(p_ii < 0.05)
lisa2021_sig <- lisa2021 %>% filter(p_ii < 0.05)
lisa2022_sig <- lisa2022 %>% filter(p_ii < 0.05)

# Create individual maps
map_2017 <- tm_shape(lisa2017) +
  tm_polygons() + 
  tm_borders(alpha = 0.5) + 
  tm_shape(lisa2017_sig) + 
  tm_fill("median", title = "Clusters") +
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Significant(2017)", main.title.size = 1)

map_2018 <- tm_shape(lisa2018) +
  tm_polygons() + 
  tm_borders(alpha = 0.5) + 
  tm_shape(lisa2018_sig) + 
  tm_fill("median", title = "Clusters") +
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Significant(2018)", main.title.size = 1)

map_2019 <- tm_shape(lisa2019) +
  tm_polygons() + 
  tm_borders(alpha = 0.5) + 
  tm_shape(lisa2019_sig) + 
  tm_fill("median", title = "Clusters") +
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Significant(2019)", main.title.size = 1)

map_2020 <- tm_shape(lisa2020) +
  tm_polygons() + 
  tm_borders(alpha = 0.5) + 
  tm_shape(lisa2020_sig) + 
  tm_fill("median", title = "Clusters") +
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Significant(2020)", main.title.size = 1)

map_2021 <- tm_shape(lisa2021) +
  tm_polygons() + 
  tm_borders(alpha = 0.5) + 
  tm_shape(lisa2021_sig) + 
  tm_fill("median", title = "Clusters") +
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Significant(2021)", main.title.size = 1)

map_2022 <- tm_shape(lisa2022) +
  tm_polygons() + 
  tm_borders(alpha = 0.5) + 
  tm_shape(lisa2022_sig) + 
  tm_fill("median", title = "Clusters") +
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Significant(2022)", main.title.size = 1)

tmap_mode("plot")
tmap_arrange(map_2017, map_2018, map_2019, map_2020, map_2021, map_2022, ncol = 3)
```

## Inference

Based on the Local Moran's I maps of Thailand from 2017 to 2022 above, the key conclusions that can be drawn are:

1.  A persistent High-High cluster appears in the northeastern region in most years (2017, 2018, 2021, 2022), suggesting a consistent hotspot.This might suggests an entrenched drug problem in this region. Other areas show more variability, shifting between different cluster types across years.

2.  There's limited evidence of Low-Low clusters throughout the period which might suggest that low drug related crimes in one province do not influence drug related crimes in its neighbouring province.

# Conclusion

The results suggest that while certain areas (like the northeastern region) show persistent outliers of drug abuse, the overall spatial pattern of random and varies over time.

This calls for adaptive and regionally-targeted law enforcement strategies to address the localized nature of drug problems, particularly in persistent hotspot areas.

Simultaneously, broader preventive measures may be necessary to address fluctuating crime patterns in other regions.
