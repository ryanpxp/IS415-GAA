---
title: "Take-home Exercise 02"
author: "Ryan Peh"
date: "September 25, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# **Take-home Exercise 2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level**

## Background

Drug abuse is associated with significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. In 2021, 1 in 17 people aged 15â€“64 in the world had used a drug in the past 12 months. Notwithstanding population growth, the estimated number of drug users grew from 240 million in 2011 to 296 million in 2021.

The geopolitics of Thailand which is near the [Golden Triangle](https://en.wikipedia.org/wiki/Golden_Triangle_(Southeast_Asia)) of Indochina, the largest drug production site in Asia, and the constant transportation infrastructure development made Thailand became market and transit routes for drug trafficking to the third countries.

In Thailand, drug abuse is one of the major social issue. There are about 2.7 million youths using drugs in Thailand. Among youths aged between 15 and 19 years, there are about 300,000 who have needs for drug treatment. Most of Thai youths involved with drugs are vocational-school students, which nearly doubles in number compared to secondary-school students.

## **Objectives**

As a curious geospatial analytics green horn, you are interested to discover:

-   if the key indicators of drug abuse of Thailand are independent from space.

-   If the indicators of drug abuse is indeed spatial dependent, then, to detect where are the clusters and outliers, and the hotspots.

-   Last but not least, to investigate how the observation above evolve over time.

## **The Task**

The specific tasks of this take-home exercise are as follows:

-   Using appropriate function of **sf** and **tidyverse**, preparing the following geospatial data layer:

    -   a study area layer in sf polygon features. It must be at [province level](https://en.wikipedia.org/wiki/Provinces_of_Thailand) (including Bangkok) of Thailand.

    -   a drug abuse indicators layer within the study area in sf polygon features.

-   Using the extracted data, perform global spatial autocorrelation analysis by using [sfdep methods](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-glsa).

-   Using the extracted data, perform local spatial autocorrelation analysis by using [sfdep methods](https://r4gdsa.netlify.app/chap10.html).

-   Describe the spatial patterns revealed by the analysis above.

## **The Data**

For the purpose of this take-home exercise, two data sets shall be used, they are:

-   [Thailand Drug Offenses \[2017-2022\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-drug-offenses-2017-2022) at Kaggle.

-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) at HDX. You are required to use the province boundary data set.

## Importing Package

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse)
```

### Geospatial data

```{r}
thai <- st_read(dsn = "data/raw/Thailand_shp", 
                 layer = "tha_admbnda_adm1_rtsd_20220121")
```

### Study area

![Breakdown of Provinces of Thailand](img\Thailand_provinces_en.svg.png){width="100%" style="object-fit: contain;"}

```{r}
#| echo: false
tm_shape(thai) + 
  tm_fill("ADM1_EN",
          title = "Study Area: Thailand Provinces",
          palette = "inferno") +
  tm_borders() +
  tm_layout(legend.show = FALSE)
```

### checks for holes

```{r}
u_thai <- st_union(thai)
plot(u_thai)
```

### Aspatial Data

```{r}
drugs <- read_csv("data/raw/thai_drug_offenses_2017_2022.csv")
```

## Mismatched Province

By checking on the naming of the province from both the geospatial and aspatial data, we can see that some of the namings are mismatched. This would cause problems when handling the data.

```{r}
comparison_df <- data.frame(
  Geospatial = sort(unique(thai$ADM1_EN)),
  Aspatial = sort(unique(drugs$province_en))
)

print(comparison_df)
```

The identified mismatches are:

| Geospatial | Aspatial |
|------------|----------|
| Bueng Kan  | buogkan  |
| Lop Buri   | Loburi   |

We will have to change these province names in the aspatial data to match those in the geospatial daata.

::: panel-tabset
### The code

```{r}
drugs <- drugs %>%
  mutate(province_en = recode(province_en,
                              "buogkan" = "Bueng Kan",
                              "Loburi" = "Lop Buri"))

```

### Checking the output

We can see that both **buogkan** and **Loburi** is now changed into **Bueng** **Kan** and **Lop** **Buri**

```{r}
print(sort(unique(drugs$province_en)))
```
:::

Taking a peek at the type of drug offenses,

```{r}
unique(drugs$types_of_drug_offenses)
```

We will be only extracting the confirmed cases from the types of drug offenses.

because






We will also break up the data into years for visualisation.



```{r}
confirmed_drug_offenses <- c(
  "drug_use_cases", "possession_cases", "possession_with_intent_to_distribute_cases", "trafficking_cases", "production_cases", "import_cases", "export_cases", "conspiracy_cases"
)

```









```{r}
drugs_by_year <- list()

for (year in 2017:2022) {
  drugs_by_year[[as.character(year)]] <- left_join(thai, drugs, by = c("ADM1_EN" = "province_en")) %>%
    dplyr::select(1:3, 17:19,21) %>%
    filter(fiscal_year == year, types_of_drug_offenses %in% confirmed_drug_offenses)
}

glimpse(drugs_by_year[["2018"]])
```



```{r}
unique(drugs_by_year[["2018"]]$types_of_drug_offenses)
```






A quick view on the distribution of drug cases in each province:
```{r}
par(mfrow=c(2,3))
par(mar = c(3,2,2,1))
for (year in 2017:2022) {
  map <- tm_shape(drugs_by_year[[as.character(year)]]) +
    tm_fill("no_cases",
            n = 5,
            style = "equal") +  
    tm_borders(alpha = 0.5) +
    tm_layout(main.title = paste("Equal interval classification - Fiscal Year", year))
  
  print(map)
}
```

## Neighbour data

As vertical, horizontal and diagonal neighbours of the province are close enough to travel to and influence each other. We would be using Queen's contiguity neighbour criteria.

To get a quick view on the neighbours of the provinces, we can plot out the neighbours.

```{r}
# Calculate contiguity neighbors
nb <- st_contiguity(thai$geometry)
```

The code has some warnings on having no neighbours.

```{r}
#| warning: false
# Plot the neighbors
plot(st_geometry(thai), border = 'gray')
plot(nb, st_geometry(thai), col = 'red', add = TRUE)

```

On closer inspecting, one of the province in the bottom left is disconnected from the rest. It appears to be Phuket that is disconnected from the rest.

![Close-up of neighbour plot](img\Phuket_region.png){width="100%" style="object-fit: contain;"}

```{r}
summary(nb)
```

From the above we can see that region number 67 is without any neighbours. To retrieve the name of region 67 (index 67 in nb):

```{r}
thai$ADM1_EN[67]
```

It is confirmed that Phuket is disconnected from the rest.

![Phuket Region](img\Phuket_region.png){width="100%" style="object-fit: contain;"} 
Looking at the map, we can see that while **Phuket** is disconnected by water body, we can considered it to be the neighbour of **Phangnga**.

```{r}
which(unique(thai$ADM1_EN) == "Phangnga")
```

From the code above, we now know the number for the \***Phangnga** region (number 67) and we will manually add **Phuket** to **Phangnga** and **Phangnga** to **Phuket**.

Adding **Phuket** to **Phangnga**

**Warning: This code is not idempotent!**

```{r}
nb[[66]] <- c(nb[[66]], as.integer(67))
```

Adding **Phangnga** to **Phuket**

```{r}
nb[[67]] <- as.integer(c(66))
```

Ensure that all regions are connected
```{r}
summary(nb)
```

**Phuket** and **Phangnga** should now be connected when plotting the neighbour
```{r}
#| warning: false
plot(st_geometry(thai), border = 'gray')
plot(nb, st_geometry(thai), col = 'red', add = TRUE)
```

# Global Moran

::: panel-tabset
### 2017

```{r}
wm_q2017 <- drugs_by_year[["2017"]] %>%
  group_by(ADM1_EN) %>%  
  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  
  ungroup() %>%
  mutate(nb = nb,  
         wt = st_weights(nb, style = "W"),  
         .before = 1)

glimpse(wm_q2017)

```








```{r}
#| eval: false
wm_q2017 <- drugs_by_year[["2017"]] %>%
  mutate(nb = nb,
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)
```

### 2018

```{r}
wm_q2018 <- drugs_by_year[["2018"]] %>%
  group_by(ADM1_EN) %>%  
  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  
  ungroup() %>%
  mutate(nb = nb,  
         wt = st_weights(nb, style = "W"), 
         .before = 1)

glimpse(wm_q2018)

```

```{r}
#| eval: false
wm_q2018 <- drugs_by_year[["2018"]] %>%
  mutate(nb = nb,
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)
```

### 2019
```{r}
wm_q2019 <- drugs_by_year[["2019"]] %>%
  group_by(ADM1_EN) %>%  
  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  
  ungroup() %>%
  mutate(nb = nb,  
         wt = st_weights(nb, style = "W"),  
         .before = 1)

glimpse(wm_q2019)

```

```{r}
#| eval: false
wm_q2019 <- drugs_by_year[["2019"]] %>%
  mutate(nb = nb,
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)
```

### 2020
```{r}
wm_q2020 <- drugs_by_year[["2020"]] %>%
  group_by(ADM1_EN) %>% 
  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  # Summarize cases per province
  ungroup() %>%
  mutate(nb = nb,  
         wt = st_weights(nb, style = "W"), 
         .before = 1)

glimpse(wm_q2020)

```

```{r}
#| eval: false
wm_q2020 <- drugs_by_year[["2020"]] %>%
  mutate(nb = nb,
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)
```

### 2021
```{r}
wm_q2021 <- drugs_by_year[["2021"]] %>%
  group_by(ADM1_EN) %>% 
  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  # Summarize cases per province
  ungroup() %>%
  mutate(nb = nb,  
         wt = st_weights(nb, style = "W"), 
         .before = 1)

glimpse(wm_q2021)

```

```{r}
#| eval: false
wm_q2021 <- drugs_by_year[["2021"]] %>%
  mutate(nb = nb,
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)
```

### 2022
```{r}
wm_q2022 <- drugs_by_year[["2022"]] %>%
  group_by(ADM1_EN) %>% 
  summarise(no_cases = sum(no_cases, na.rm = TRUE)) %>%  # Summarize cases per province
  ungroup() %>%
  mutate(nb = nb,  
         wt = st_weights(nb, style = "W"), 
         .before = 1)

glimpse(wm_q2022)

```

```{r}
#| eval: false
wm_q2022 <- drugs_by_year[["2022"]] %>%
  mutate(nb = nb,
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)
```

:::

## quick glance at global moran

::: panel-tabset
### 2017

```{r}
moranI2017 <- global_moran(wm_q2017$no_cases,
                       wm_q2017$nb,
                       wm_q2017$wt)
glimpse(moranI2017)
```

### 2018

```{r}
moranI2018 <- global_moran(wm_q2018$no_cases,
                       wm_q2018$nb,
                       wm_q2018$wt)
glimpse(moranI2018)
```

### 2019

```{r}
moranI2019 <- global_moran(wm_q2019$no_cases,
                       wm_q2019$nb,
                       wm_q2019$wt)
glimpse(moranI2019)
```

### 2020

```{r}
moranI2020 <- global_moran(wm_q2020$no_cases,
                       wm_q2020$nb,
                       wm_q2020$wt)
glimpse(moranI2020)
```

### 2021

```{r}
moranI2021 <- global_moran(wm_q2021$no_cases,
                       wm_q2021$nb,
                       wm_q2021$wt)
glimpse(moranI2021)
```

### 2022

```{r}
moranI2022 <- global_moran(wm_q2022$no_cases,
                       wm_q2022$nb,
                       wm_q2022$wt)
glimpse(moranI2022)
```

:::



To make the data reproducible we would set the seed to a specify value
```{r}

set.seed(12345)
```

## permutations

::: panel-tabset
### 2017

```{r}
global_moran_perm(wm_q2017$no_cases,
                       wm_q2017$nb,
                       wm_q2017$wt,
                  nsim = 99)
```

### 2018

```{r}
global_moran_perm(wm_q2018$no_cases,
                       wm_q2018$nb,
                       wm_q2018$wt,
                  nsim = 99)
```

### 2019

```{r}
global_moran_perm(wm_q2019$no_cases,
                       wm_q2019$nb,
                       wm_q2019$wt,
                  nsim = 99)
```

### 2020

```{r}
global_moran_perm(wm_q2020$no_cases,
                       wm_q2020$nb,
                       wm_q2020$wt,
                  nsim = 99)
```

### 2021

```{r}
global_moran_perm(wm_q2021$no_cases,
                       wm_q2021$nb,
                       wm_q2021$wt,
                  nsim = 99)
```

### 2022

```{r}
global_moran_perm(wm_q2022$no_cases,
                       wm_q2022$nb,
                       wm_q2022$wt,
                  nsim = 99)
```

:::

## Inference
From the global Moran's I test, we can infer that 










# Local Moran

Null hypothesis: The usage of drugs at one province do not depend on values at neighbouring province(s) and that the key indicators of drug abuse of Thailand are independent from space.







::: panel-tabset
### 2017

```{r}
lisa2017 <- wm_q2017 %>% 
  mutate(local_moran = local_moran(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

### 2018

```{r}
lisa2018 <- wm_q2018 %>% 
  mutate(local_moran = local_moran(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

### 2019

```{r}
lisa2019 <- wm_q2019 %>% 
  mutate(local_moran = local_moran(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

### 2020

```{r}
lisa2020 <- wm_q2020 %>% 
  mutate(local_moran = local_moran(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

### 2021

```{r}
lisa2021 <- wm_q2021 %>% 
  mutate(local_moran = local_moran(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

### 2022

```{r}
lisa2022 <- wm_q2022 %>% 
  mutate(local_moran = local_moran(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```
:::

:::

In order to identify if we should use p_ii or ii values for the visualisation, we need to identify how skewed the data are.

```{r}
num_greater_than_05 <- sum(abs(lisa2017$skewness) > 0.5)
percentage <- (num_greater_than_05 / nrow(lisa2017)) * 100

print(paste0("Percentage of rows with abs(skewness) > 0.5: ", round(percentage, 2), "%"))

```

```{r}
hist(lisa2017$skewness, 
     freq=TRUE, 
     breaks=20, 
     xlab="Skewness")
abline(v=0, 
       col="red") 
```

Since the data is evidently skewed, we would use the median instead of the mean to visualise the data.

```{r}
hist(lisa2017$skewness, 
     freq=TRUE, 
     breaks=20, 
     xlab="Skewness")
abline(v=0, 
       col="red") 
```

Since the data is highly skewed we will be using the median

for comparison

::: panel-tabset
### 2017

```{r}
map1 <- tm_shape(lisa2017) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of No of cases",
            main.title.size = 0.8)

map2 <- tm_shape(lisa2017) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### 2018

```{r}
map1 <- tm_shape(lisa2018) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of No of cases",
            main.title.size = 0.8)

map2 <- tm_shape(lisa2018) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### 2019

```{r}
map1 <- tm_shape(lisa2019) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of No of cases",
            main.title.size = 0.8)

map2 <- tm_shape(lisa2019) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### 2020

```{r}
map1 <- tm_shape(lisa2020) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of No of cases",
            main.title.size = 0.8)

map2 <- tm_shape(lisa2020) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### 2021

```{r}
map1 <- tm_shape(lisa2021) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of No of cases",
            main.title.size = 0.8)

map2 <- tm_shape(lisa2021) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

### 2022

```{r}
map1 <- tm_shape(lisa2022) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of No of cases",
            main.title.size = 0.8)

map2 <- tm_shape(lisa2022) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

:::



## visualising significance

```{r}
lisa2017_sig <- lisa2017 %>%
  filter(p_ii < 0.05)
tmap_mode("plot")
tm_shape(lisa2017) +
  tm_polygons() + 
  tm_borders(alpha = 0.5) + 
  tm_shape(lisa2017_sig) + 
  tm_fill("median") +
  tm_borders(alpha = 0.4)
```

```{r}
lisa2018_sig <- lisa2018 %>%
  filter(p_ii < 0.05)
tmap_mode("plot")
tm_shape(lisa2018) +
  tm_polygons() + 
  tm_borders(alpha = 0.5) + 
  tm_shape(lisa2018_sig) + 
  tm_fill("median") +
  tm_borders(alpha = 0.4)
```

```{r}
lisa2019_sig <- lisa2019 %>%
  filter(p_ii < 0.05)
tmap_mode("plot")
tm_shape(lisa2019) +
  tm_polygons() + 
  tm_borders(alpha = 0.5) + 
  tm_shape(lisa2019_sig) + 
  tm_fill("median") +
  tm_borders(alpha = 0.4)
```

```{r}
lisa2020_sig <- lisa2020 %>%
  filter(p_ii < 0.05)
tmap_mode("plot")
tm_shape(lisa2020) +
  tm_polygons() + 
  tm_borders(alpha = 0.5) + 
  tm_shape(lisa2020_sig) + 
  tm_fill("median") +
  tm_borders(alpha = 0.4)
```

```{r}
lisa2021_sig <- lisa2021 %>%
  filter(p_ii < 0.05)
tmap_mode("plot")
tm_shape(lisa2021) +
  tm_polygons() + 
  tm_borders(alpha = 0.5) + 
  tm_shape(lisa2021_sig) + 
  tm_fill("median") +
  tm_borders(alpha = 0.4)
```

```{r}
lisa2022_sig <- lisa2022 %>%
  filter(p_ii < 0.05)
tmap_mode("plot")
tm_shape(lisa2022) +
  tm_polygons() + 
  tm_borders(alpha = 0.5) + 
  tm_shape(lisa2022_sig) + 
  tm_fill("median") +
  tm_borders(alpha = 0.4)
```




year 2022 decriminalised drugs






## Local Gi\* statistics

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

