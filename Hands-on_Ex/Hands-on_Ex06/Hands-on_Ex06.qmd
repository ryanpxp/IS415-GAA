---
title: "Hands-on_Ex06"
author: "Ryan Peh"
date: "September 21, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# **9 Global and Local Measures of Spatial Autocorrelation**

## **9.1 Overview**

To compute Local Measures of Spatial Autocorrelation (LMSA) by using **spdep** package.

Objectives:

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions **spdep** package;

-   compute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of **spdep** package; and

-   to visualise the analysis output by using **tmap** package.

### **9.1.1 The analytical question**

In spatial policy, a key development objective for local governments and planners is to achieve equitable distribution of development across the province. This study aims to apply appropriate spatial statistical methods to determine whether development is evenly distributed geographically. If the findings suggest an uneven distribution, the next question is: "Is there evidence of spatial clustering?" If spatial clustering is detected, the subsequent question becomes: "Where are these clusters located?"

In this case study, we focus on analyzing the spatial distribution of a selected development indicator—GDP per capita—in Hunan Province, People's Republic of China.

### **9.1.2 The Study Area and Data**

Two data sets will be used in this hands-on exercise, they are:

-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

### **9.1.3 Setting the Analytical Tools**

Before we begin our analysis, we need to set up our R environment with the necessary tools. We'll be using four key packages:

1.  **sf**: For importing and managing geospatial data in R

2.  **tidyverse**: Primarily for manipulating attribute data in R

3.  **spdep**: For calculating spatial weights and both global and local spatial autocorrelation statistics

4.  **tmap**: For creating high-quality choropleth maps

The code chunk below is used to load the relevant packages:

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## **9.2 Setup**

### **9.2.1 Import shapefile into r environment**

The code chunk below uses [`st_read()`](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### **9.2.2 Import csv file into r environment**

Next, import *Hunan_2012.csv* into R by using `read_csv()`of **readr** package. The output is R data frame class.

```{r}

hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### **9.2.3 Performing relational join**

The code chunk below will be used to update the attribute table of *hunan*’s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using [`left_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html) of **dplyr** package.

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  dplyr::select(1:4, 7, 15)
```

### **9.2.4 Visualising Regional Development Indicator**

To prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using `qtm()` of **tmap** package.

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

## **9.3 Global Measures of Spatial Autocorrelation**

### **9.3.1 Computing Contiguity Spatial Weights**

Before we can compute the global spatial autocorrelation statistics, we need to create spatial weights for the study area. Spatial weights define the neighborhood relationships between the geographical units (e.g., counties) within the study area.

In the code chunk below, the `poly2nb()` function from the `spdep` package is used to calculate contiguity weight matrices for the study area. This function generates a list of neighbors based on regions that share contiguous boundaries. The function includes a "queen" argument, which accepts `TRUE` or `FALSE` as options. By default, if this argument is not specified, it is set to `TRUE`, meaning the function will return a list of first-order neighbors using the Queen contiguity criteria.

The code chunk below specifically computes a Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.

### **9.3.2 Row-standardised weights matrix**

Next, we need to assign weights to each neighboring polygon. In this case, we will assign equal weight to all neighboring polygons using the "W" style. This means each neighboring polygon will receive a weight of 1 divided by the number of neighbors, and we will sum the weighted income values. Although this method is intuitive for summarizing neighboring values, it has a limitation: polygons on the edges of the study area rely on fewer neighbors, which can lead to over- or under-estimating the true spatial autocorrelation in the data. For simplicity, we'll use the "W" style in this example, but more robust options, like the "B" style, are available.

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

## **9.4 Global Measures of Spatial Autocorrelation: Moran’s I**

To perform Moran’s I statistics testing by using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

### **9.4.1 Moran’s I test**

The code chunk below performs Moran’s I statistical testing using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

A positive Moran I value indicates positive spatial autocorrelation, meaning areas with similar GDPPC values tend to be located near each other.

The p-value is 1.095e-06 \< 0.05, which means we reject the null hypothesis of no spatial autocorrelation.

There is statistically significant positive spatial autocorrelation in the GDP per capita of regions in Hunan. Regions with similar GDPPC values tend to cluster spatially.

### **9.4.2 Computing Monte Carlo Moran’s I**

The code chunk below performs permutation test for Moran’s I statistic by using [`moran.mc()`](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

From the output above, we can infer that p-value is lower than alpha value of 0.05, confirming the presence of positive spatial autocorrelation.

The Monte Carlo simulation supports the conclusion from the original Moran's I test. There is statistically significant positive spatial autocorrelation in the GDP per capita across the regions of Hunan, as the observed Moran's I value is highly unlikely to have occurred by random chance.

### **9.4.3 Visualising Monte Carlo Moran’s I**

To examine the simulated Moran’s I test statistics in greater detail, this can be achieve by plotting the distribution of the statistical values as a histogram by using the code chunk below.

In the code chunk below [`hist()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [`abline()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics are used.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

The maximum simulated Moran's I value (0.2759) is still smaller than the observed Moran's I (0.30075), which further suggests that the observed value is an outlier compared to random permutations.

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

Using ggplot instead:

```{r}
bperm_df <- data.frame(Morans_I = bperm$res)

ggplot(bperm_df, aes(x = Morans_I)) +
  geom_histogram(binwidth = 0.02, fill = "skyblue", color = "black") + 
  geom_vline(xintercept = 0, color = "red", linetype = "dashed", size = 1) + 
  labs(x = "Simulated Moran's I", y = "Frequency", 
       title = "Histogram of Simulated Moran's I Values") 
```

## **9.5 Global Measures of Spatial Autocorrelation: Geary’s C**

To perform Geary’s C statistics testing by using appropriate functions of **spdep** package.

### **9.5.1 Geary’s C test**

The code chunk below performs Geary’s C test for spatial autocorrelation by using [`geary.test()`](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

Geary C statistic of 0.6907 suggests that positive spatial autocorrelation, neighboring areas tend to have similar GDP per capita.

A p-value 0.0001526 \< 0.05 suggests that we can reject the null hypothesis, and there is significant spatial autocorrelation.

### **9.5.2 Computing Monte Carlo Geary’s C**

The code chunk below performs permutation test for Geary’s C statistic by using [`geary.mc()`](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

The observed Geary’s C of 0.69072 is much smaller than any of the simulated values, which indicates **statistically significant positive spatial autocorrelation** in GDP per capita across the regions of Hunan. This means neighboring regions tend to have similar GDPPC values, and this clustering is highly unlikely to have occurred by random chance.

### **9.5.3 Visualising the Monte Carlo Geary’s C**

Next, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

Since the observed Geary's C statistic (0.69072) is below the red line at 1, it indicates that the observed level of spatial autocorrelation is lower than expected under the null hypothesis.

The majority of the simulated values lie above 1, suggesting that the observed Geary’s C value is an outlier in the context of random spatial distribution.

## **9.6 Spatial Correlogram**

Spatial correlograms are effective tools for analyzing patterns of spatial autocorrelation in your data or model residuals. They illustrate how the correlation between pairs of spatial observations changes with increasing distance (or lag) between them, displaying an index of autocorrelation (such as Moran’s I or Geary’s c) plotted against distance. While correlograms may not be as foundational as variograms—key concepts in geostatistics—they serve as valuable exploratory and descriptive tools. In fact, they can offer more nuanced insights than variograms for this purpose.

### **9.6.1 Compute Moran’s I correlogram and plot**

In the code chunk below, [`sp.correlogram()`](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The **plot()** of base Graph is then used to plot the output.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

By plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(MI_corr)
```

The spatial correlogram indicates significant positive spatial autocorrelation in GDP per capita at shorter distances (Lags 1 to 3), suggesting that neighboring regions have similar values. However, as the distance increases (Lags 5 and 6), the autocorrelation becomes negative and significant, implying that the economic characteristics of areas may diverge. This pattern highlights the importance of considering distance in spatial analyses and suggests complex spatial relationships in economic data.

Lag 4 shows a Moran's I of 0.0299, which is not statistically significant (p = 0.2260). This suggests that spatial autocorrelation becomes weaker and may no longer be present at this distance.

### **9.6.2 Compute Geary’s C correlogram and plot**

In the code chunk below, `sp.correlogram()` of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The **plot()** of base Graph is then used to plot the output.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

```{r}
print(GC_corr)
```

## **9.7 Local Indicators of Spatial Association(LISA)**

Local Indicators of Spatial Association (LISA) are statistical methods used to evaluate the presence of spatial clusters and/or outliers for a given variable. For example, when analyzing the distribution of GDP per capita in Hunan Province, China, local clusters suggest that certain counties have significantly higher or lower GDP rates than expected by random chance, indicating a non-random spatial pattern.

This section covers the application of Local Indicators of Spatial Association (LISA), specifically local Moran's I, to identify clusters and outliers in the 2012 GDP per capita data of Hunan Province, China.

### **9.7.1 Computing local Moran’s I**

To compute local Moran’s I, the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function of **spdep** will be used. It computes *Ii* values, given a set of *zi* values and a listw object providing neighbour weighting information for the polygon associated with the zi values.

The code chunks below are used to compute local Moran’s I of *GDPPC2012* at the county level.

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

*localmoran()* function returns a matrix of values whose columns are:

-   Ii: the local Moran’s I statistics

-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis

-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis

-   Z.Ii:the standard deviate of local moran statistic

-   Pr(): the p-value of local moran statistic

The code chunk below list the content of the local Moran matrix derived by using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat).

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=hunan$County[fips]),
  check.names=FALSE)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.

#### 9.7.1.1 Mapping the local Moran’s I

Before mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called *hunan.localMI*.

```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

#### 9.7.1.2 Mapping local Moran’s I values

Using choropleth mapping functions of **tmap** package, we can plot the local Moran’s I values by using the code chinks below.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

#### 9.7.1.3 Mapping local Moran’s I p-values

The choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.

The code chunks below produce a choropleth map of Moran’s I p-values by using functions of **tmap** package.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

#### 9.7.1.4 Mapping both local Moran’s I values and p-values

For effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.

The code chunk below will be used to create such visualisation.

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

## **9.8 Creating a LISA Cluster Map**

The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

### **9.8.1 Plotting Moran scatterplot**

The Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.

The code chunk below plots the Moran scatterplot of GDPPC 2012 by using [*moran.plot()*](https://r-spatial.github.io/spdep/reference/moran.plot.html) of **spdep**.

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

### **9.8.2 Plotting Moran scatterplot with standardised variable**

To centers and scales the variable, we will use [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) . Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% 
  as.vector 
```

The [*as.vector()*](https://www.rdocumentation.org/packages/pbdDMAT/versions/0.5-1/topics/as.vector) added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.

Now, we are ready to plot the Moran scatterplot again by using the code chunk below.

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

### **9.8.3 Preparing LISA map classes**

The code chunks below show the steps to prepare a LISA cluster map.

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Next, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.

```{r}
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
```

This is follow by centering the local Moran’s around the mean.

```{r}
LM_I <- localMI[,1] - mean(localMI[,1])    
```

Set a statistical significance level for the local Moran.

```{r}
signif <- 0.05       

quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4      

quadrant[localMI[,5]>signif] <- 0
```

### **9.8.4 Plotting LISA map**

Now, we can build the LISA map by using the code chunks below.

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

For effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.

The code chunk below will be used to create such visualisation.

```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, 
             asp=1, ncol=2)
```

## **9.9 Hot Spot and Cold Spot Area Analysis**

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.

The term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).

### **9.9.1 Getis and Ord’s G-Statistics**

An alternative method for detecting spatial anomalies is Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). This approach examines neighboring areas within a specified proximity to identify clusters of either high or low values. Statistically significant hotspots are defined as regions with high values that are surrounded by other neighboring areas that also exhibit high values.

The analysis involves three key steps:

1.  Deriving the spatial weights matrix
2.  Computing the Gi statistics
3.  Mapping the Gi statistics

### **9.9.2 Deriving distance-based weight matrix**

First, we need to establish a new set of neighbors. While spatial autocorrelation considers units that share borders, the Getis-Ord method defines neighbors based on distance.

There are two types of distance-based proximity matrices:

1.  **Fixed distance weight matrix**
2.  **Adaptive distance weight matrix**

#### **9.9**.2.1 Deriving the centroid

Before creating our connectivity graph, we need to associate points with each polygon. This process is a bit more involved than simply running `st_centroid()` on the `sf` object `us.bound`, as we need the coordinates in a separate data frame. To achieve this, we will use a mapping function, which applies a specified function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of `us.bound`, and the function we’ll use is `st_centroid()`. We will utilize the `map_dbl` variant from the `purrr` package for this purpose. For further details, you can refer to the documentation for `map`.

To extract the longitude values, we will map the `st_centroid()` function over the geometry column of `us.bound`, accessing the longitude through double bracket notation \[\[\]\] and specifying 1. This allows us to retrieve only the longitude, which corresponds to the first value in each centroid. We do the same for latitude with one key difference. We access the second value per each centroid with \[\[2\]\]

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

#### 9.9.2.2 Determine the cut-off distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

#### 9.9.2.3 Computing fixed distance weight matrix

Now, we will compute the distance weight matrix by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

### **10.6.3 Computing adaptive distance weight matrix**

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

## **9.10 Computing Gi statistics**

### **9.10.1 Gi statistics using fixed distance**

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

The output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.

The Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.

Next, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

The code chunk above accomplishes three tasks. First, it converts the output vector (i.e., `gi.fixed`) into an R matrix object using `as.matrix()`. Next, it employs `cbind()` to combine `hunan@data` and the `gi.fixed` matrix, creating a new `SpatialPolygonDataFrame` called `hunan.gi`. Finally, it renames the field containing the Gi values to `gstat_fixed` using the `rename()` function.

### **9.10.2 Mapping Gi values with fixed distance weights**

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

### **9.10.3 Gi statistics using adaptive distance**

The code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e *knb_lw*).

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### **9.10.4 Mapping Gi values with adaptive distance weights**

It is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of **tmap** package will be used to map the Gi values.

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```
