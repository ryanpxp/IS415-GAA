---
title: "In-class Exercise 5"
author: "Ryan Peh"
date: "September 16, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
---

# gwModel

import

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)
```

```{r}
#| eval: false
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

```{r}
#| eval: false
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

```{r}
#| eval: false
hunan <- left_join(hunan,hunan2012)%>%
  dplyr::select(1:3, 7, 15, 16, 31)
```

tibbl form that will be saved in rds format so that won't need to keep loading large dataset and join them

```{r}
#| eval: false
write_rds(hunan, "data/rds/hunan.rds")
```

after writing we read by using read_rds "#\| echo: false to hide the code chunk"

```{r}
hunan_sf <- read_rds("data/rds/hunan.rds")
```

convert to spatial polygon data frame doc mentioned gwmodel needs sp so sf needs to be converted to sp since gwmodel is built around older sp model

```{r}
hunan_sp <- hunan_sf %>%
  as_Spatial()
```

## Geographically weighted summary statistics wit adaptive bandwidth

### Determine adaptive bandwidth

aic machine learning model, aic reiterate and how it converge, another one is cross validation

```         
             approach = "CV" to use cross validation
```

GDPPC assume is a function of one grid circle is in km need to convert to in metres

```{r}
bw_AIC <- bw.gwr(GDPPC ~ 1,
                 data = hunan_sp,
                 approach = "AIC",
                 adaptive = TRUE,
                 kernel = "bisquare",
                 longlat = T)
```

```{r}
bw_AIC
```

geography weighted measures recommended is 22 neighbours

CV:

```{r}
bw_CV <- bw.gwr(GDPPC ~ 1,
                 data = hunan_sp,
                 approach = "CV",
                 adaptive = TRUE,
                 kernel = "bisquare",
                 longlat = T)
```

```{r}
bw_CV
```

to see fixed distances change adaptive to false

```{r}
bw_AIC <- bw.gwr(GDPPC ~ 1,
                 data = hunan_sp,
                 approach = "AIC",
                 adaptive = FALSE,
                 kernel = "bisquare",
                 longlat = T)
```

```{r}
bw_AIC
```

```{r}
bw_CV <- bw.gwr(GDPPC ~ 1,
                 data = hunan_sp,
                 approach = "CV",
                 adaptive = FALSE,
                 kernel = "bisquare",
                 longlat = T)
```

```{r}
bw_CV
```

recommended aic is 160.557km (unit is in km!) cv is 76.18km as compared to adaptive distance where cv and aic is the same

computing geographically weighted summary statistics

must make sure adaptive bandwith must be same as bw_AIC, else give wrong data

```{r}
bw_AIC <- bw.gwr(GDPPC ~ 1,
                 data = hunan_sp,
                 approach = "AIC",
                 adaptive = TRUE,
                 kernel = "bisquare",
                 longlat = T)

gwstat <- gwss(data = hunan_sp,
               vars = "GDPPC",
               bw = bw_AIC,
               adaptive = TRUE,
               kernel = "bisquare",
               longlat = T)
```

important is sdf spatial data

diff between sp and gws is gws includes itself gwss has no unique identifier so have a hard time doing join to be able to append results 1) take sdf convert to dataframe

make life easier by taking it out of sdf that looks the same as @data

```{r}
gwstat_df <- as.data.frame(gwstat$SDF)
```

cbind only works well if gwstat_df is not touched no sorting or arrangement cbind() to append the newly derived data data.frame onto hunan_sf sf data

```{r}
hunan_gstat <- cbind(hunan_sf, gwstat_df)
```

```{r}
tm_shape(hunan_gstat) +
  tm_fill("GDPPC_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) + 
  tm_layout(main.title = "Distribution of geographically weighted mean",
            main.title.size = 2.0,
            main.title.position = "center",
            legend.text.size = 1.2,
            legend.height = 1.50,
            legend.width = 1.50,
            frame = TRUE)
```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```
